# File generated by jrohc. DO NOT EDIT.
openapi: 3.0.0
info:
  title: Models
  version: ''
paths: {}
components:
  schemas:
    addPetParams:
      type: object
      properties:
        pet:
          allOf:
          - $ref: '#/components/schemas/pet'
          - description: Information of pet.
      required:
      - pet
    addPetResp:
      type: object
      properties:
        traceID:
          type: string
          description: The identifier of the trace associated with the log entry.
          example: Uv38ByGCZU8WP18PmmIdcg
        error:
          allOf:
          - $ref: ../common.yaml#/components/schemas/error
          - description: The error encountered.
      required:
      - traceID
    getPetParams:
      type: object
      properties:
        petID:
          allOf:
          - $ref: '#/components/schemas/petID'
          - description: The identifier of pet.
      required:
      - petID
    getPetResp:
      type: object
      properties:
        traceID:
          type: string
          description: The identifier of the trace associated with the log entry.
          example: Uv38ByGCZU8WP18PmmIdcg
        error:
          allOf:
          - $ref: ../common.yaml#/components/schemas/error
          - description: The error encountered. This field is mutually exclusive of
              the `results` field.
        results:
          allOf:
          - $ref: '#/components/schemas/getPetResults'
          - description: The results returned. This field is mutually exclusive of
              the `error` field.
      required:
      - traceID
    getPetResults:
      type: object
      properties:
        pet:
          allOf:
          - $ref: '#/components/schemas/pet'
          - description: Information of pet.
      required:
      - pet
    getPetsParams:
      type: object
      properties:
        petIDs:
          type: array
          minItems: 1
          maxItems: 30
          items:
            allOf:
            - $ref: '#/components/schemas/petID'
            - description: The identifier of pet.
      required:
      - petIDs
    getPetsResp:
      type: object
      properties:
        traceID:
          type: string
          description: The identifier of the trace associated with the log entry.
          example: Uv38ByGCZU8WP18PmmIdcg
        error:
          allOf:
          - $ref: ../common.yaml#/components/schemas/error
          - description: The error encountered. This field is mutually exclusive of
              the `results` field.
        results:
          allOf:
          - $ref: '#/components/schemas/getPetsResults'
          - description: The results returned. This field is mutually exclusive of
              the `error` field.
      required:
      - traceID
    getPetsResults:
      type: object
      properties:
        pets:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/pet'
            - description: Information of pet.
    updatePetParams:
      type: object
      properties:
        petPatch:
          allOf:
          - $ref: '#/components/schemas/petPatch'
          - description: Updated information of pet.
      required:
      - petPatch
    updatePetResp:
      type: object
      properties:
        traceID:
          type: string
          description: The identifier of the trace associated with the log entry.
          example: Uv38ByGCZU8WP18PmmIdcg
        error:
          allOf:
          - $ref: ../common.yaml#/components/schemas/error
          - description: The error encountered.
      required:
      - traceID
    findPetsParams:
      type: object
      properties:
        petStatus:
          allOf:
          - $ref: '#/components/schemas/petStatus'
          - description: |-
              The status of pet.

              Constants:

              - PET_AVAILABLE(1): Pet is available.
              - PET_PENDING(2): Pet is pending.
              - PET_SOLD(3): Pet is sold.
      required:
      - petStatus
    findPetsResp:
      type: object
      properties:
        traceID:
          type: string
          description: The identifier of the trace associated with the log entry.
          example: Uv38ByGCZU8WP18PmmIdcg
        error:
          allOf:
          - $ref: ../common.yaml#/components/schemas/error
          - description: The error encountered. This field is mutually exclusive of
              the `results` field.
        results:
          allOf:
          - $ref: '#/components/schemas/findPetsResults'
          - description: The results returned. This field is mutually exclusive of
              the `error` field.
      required:
      - traceID
    findPetsResults:
      type: object
      properties:
        pets:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/pet'
            - description: Information of pet.
    createOrderParams:
      type: object
      properties:
        order:
          allOf:
          - $ref: '#/components/schemas/order'
          - description: Information of order.
      required:
      - order
    createOrderResp:
      type: object
      properties:
        traceID:
          type: string
          description: The identifier of the trace associated with the log entry.
          example: Uv38ByGCZU8WP18PmmIdcg
        error:
          allOf:
          - $ref: ../common.yaml#/components/schemas/error
          - description: The error encountered. This field is mutually exclusive of
              the `results` field.
        results:
          allOf:
          - $ref: '#/components/schemas/createOrderResults'
          - description: The results returned. This field is mutually exclusive of
              the `error` field.
      required:
      - traceID
    createOrderResults:
      type: object
      properties:
        orderID:
          allOf:
          - $ref: '#/components/schemas/orderID'
          - description: The identifier of order.
      required:
      - orderID
    getOrderParams:
      type: object
      properties:
        orderID:
          allOf:
          - $ref: '#/components/schemas/orderID'
          - description: The identifier of order.
      required:
      - orderID
    getOrderResp:
      type: object
      properties:
        traceID:
          type: string
          description: The identifier of the trace associated with the log entry.
          example: Uv38ByGCZU8WP18PmmIdcg
        error:
          allOf:
          - $ref: ../common.yaml#/components/schemas/error
          - description: The error encountered. This field is mutually exclusive of
              the `results` field.
        results:
          allOf:
          - $ref: '#/components/schemas/getOrderResults'
          - description: The results returned. This field is mutually exclusive of
              the `error` field.
      required:
      - traceID
    getOrderResults:
      type: object
      properties:
        order:
          allOf:
          - $ref: '#/components/schemas/order'
          - description: Information of order.
      required:
      - order
    createUserParams:
      type: object
      properties:
        user:
          allOf:
          - $ref: '#/components/schemas/user'
          - description: Information of user.
      required:
      - user
    createUserResp:
      type: object
      properties:
        traceID:
          type: string
          description: The identifier of the trace associated with the log entry.
          example: Uv38ByGCZU8WP18PmmIdcg
        error:
          allOf:
          - $ref: ../common.yaml#/components/schemas/error
          - description: The error encountered.
      required:
      - traceID
    getUserParams:
      type: object
      properties:
        userID:
          allOf:
          - $ref: '#/components/schemas/userID'
          - description: The identifier of user.
      required:
      - userID
    getUserResp:
      type: object
      properties:
        traceID:
          type: string
          description: The identifier of the trace associated with the log entry.
          example: Uv38ByGCZU8WP18PmmIdcg
        error:
          allOf:
          - $ref: ../common.yaml#/components/schemas/error
          - description: The error encountered. This field is mutually exclusive of
              the `results` field.
        results:
          allOf:
          - $ref: '#/components/schemas/getUserResults'
          - description: The results returned. This field is mutually exclusive of
              the `error` field.
      required:
      - traceID
    getUserResults:
      type: object
      properties:
        user:
          allOf:
          - $ref: '#/components/schemas/user'
          - description: Information of user.
      required:
      - user
    getUsersParams:
      type: object
      properties:
        userIDs:
          type: array
          minItems: 1
          maxItems: 30
          items:
            allOf:
            - $ref: '#/components/schemas/userID'
            - description: The identifier of user.
      required:
      - userIDs
    getUsersResp:
      type: object
      properties:
        traceID:
          type: string
          description: The identifier of the trace associated with the log entry.
          example: Uv38ByGCZU8WP18PmmIdcg
        error:
          allOf:
          - $ref: ../common.yaml#/components/schemas/error
          - description: The error encountered. This field is mutually exclusive of
              the `results` field.
        results:
          allOf:
          - $ref: '#/components/schemas/getUsersResults'
          - description: The results returned. This field is mutually exclusive of
              the `error` field.
      required:
      - traceID
    getUsersResults:
      type: object
      properties:
        users:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/user'
            - description: Information of user.
    updateUserParams:
      type: object
      properties:
        userPatch:
          allOf:
          - $ref: '#/components/schemas/userPatch'
          - description: Updated information of user.
      required:
      - userPatch
    updateUserResp:
      type: object
      properties:
        traceID:
          type: string
          description: The identifier of the trace associated with the log entry.
          example: Uv38ByGCZU8WP18PmmIdcg
        error:
          allOf:
          - $ref: ../common.yaml#/components/schemas/error
          - description: The error encountered.
      required:
      - traceID
    pet:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/petID'
          - description: The identifier of pet.
        name:
          allOf:
          - $ref: '#/components/schemas/petName'
          - description: The name of pet.
        tags:
          type: array
          minItems: 1
          items:
            allOf:
            - $ref: '#/components/schemas/petTag'
            - description: A tag of pet.
        status:
          allOf:
          - $ref: '#/components/schemas/petStatus'
          - description: |-
              The status of pet.

              Constants:

              - PET_AVAILABLE(1): Pet is available.
              - PET_PENDING(2): Pet is pending.
              - PET_SOLD(3): Pet is sold.
      required:
      - id
      - name
      - tags
      - status
    petPatch:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/petID'
          - description: The identifier of pet.
        name:
          allOf:
          - $ref: '#/components/schemas/petName'
          - description: The name of pet. Provide it if it needs to be changed.
        tags:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/petTag'
            - description: A tag of pet. Provide it if it needs to be changed.
        status:
          allOf:
          - $ref: '#/components/schemas/petStatus'
          - description: |-
              The status of pet. Provide it if it needs to be changed.

              Constants:

              - PET_AVAILABLE(1): Pet is available.
              - PET_PENDING(2): Pet is pending.
              - PET_SOLD(3): Pet is sold.
      required:
      - id
    petID:
      type: integer
      format: int64
      minimum: 1
      example: 2020
    petName:
      type: string
      minLength: 1
      maxLength: 63
      example: spike
    petTag:
      type: string
      minLength: 1
      maxLength: 63
      example: puppy
    petStatus:
      type: integer
      format: int32
      enum:
      - 1
      - 2
      - 3
    order:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/orderID'
          - description: The identifier of order.
        petID:
          allOf:
          - $ref: '#/components/schemas/petID'
          - description: The identifier of pet.
        quantity:
          type: integer
          format: int32
          minimum: 1
          description: The quantity of pets.
        status:
          allOf:
          - $ref: '#/components/schemas/orderStatus'
          - description: |-
              The status of order.

              Constants:

              - ORDER_PLACED(1): Order is placed.
              - ORDER_APPROVED(2): Order is approved.
              - ORDER_DELIVERED(3): Order is delivered.
      required:
      - id
      - petID
      - quantity
      - status
    orderID:
      type: integer
      format: int64
      minimum: 1
      example: 202191010101011
    orderStatus:
      type: integer
      format: int32
      enum:
      - 1
      - 2
      - 3
    user:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/userID'
          - description: The identifier of user.
        firstName:
          allOf:
          - $ref: '#/components/schemas/firstName'
          - description: The first name of user.
        lastName:
          allOf:
          - $ref: '#/components/schemas/lastName'
          - description: The last name of user.
        email:
          allOf:
          - $ref: '#/components/schemas/email'
          - description: The email of user.
        phone:
          allOf:
          - $ref: '#/components/schemas/phone'
          - description: The phone of user.
        password:
          allOf:
          - $ref: '#/components/schemas/password'
          - description: The password of user.
      required:
      - id
      - firstName
      - lastName
      - email
      - password
    userPatch:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/userID'
          - description: The identifier of user.
        firstName:
          allOf:
          - $ref: '#/components/schemas/firstName'
          - description: The first name of user. Provide it if it needs to be changed.
        lastName:
          allOf:
          - $ref: '#/components/schemas/lastName'
          - description: The last name of user. Provide it if it needs to be changed.
        email:
          allOf:
          - $ref: '#/components/schemas/email'
          - description: The email of user. Provide it if it needs to be changed.
        phone:
          allOf:
          - $ref: '#/components/schemas/phone'
          - description: The phone of user. Provide it if it needs to be changed.
        password:
          allOf:
          - $ref: '#/components/schemas/password'
          - description: The password of user. Provide it if it needs to be changed.
      required:
      - id
    userID:
      type: string
      minLength: 1
      maxLength: 31
      pattern: '[a-z][a-z0-9]*'
      example: tony1983
    firstName:
      type: string
      minLength: 1
      maxLength: 63
      example: Tony
    lastName:
      type: string
      minLength: 1
      maxLength: 63
      example: Montana
    email:
      type: string
      minLength: 1
      maxLength: 127
      pattern: '[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+'
      example: tony1983@gmail.com
    phone:
      type: string
      minLength: 1
      maxLength: 31
      pattern: \+[0-9]+ [0-9]+
      example: +86 13333333333
    password:
      type: string
      minLength: 6
      maxLength: 31
      example: 123abc
