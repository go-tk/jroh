// Code generated by jrohc. DO NOT EDIT.

package petstoreapi

import (
	context "context"
	apicommon "github.com/go-tk/jroh/go/apicommon"
	http "net/http"
)

type UserServer interface {
	CreateUser(ctx context.Context, params *CreateUserParams) (err error)
	GetUser(ctx context.Context, params *GetUserParams, results *GetUserResults) (err error)
	GetUsers(ctx context.Context, params *GetUsersParams, results *GetUsersResults) (err error)
	UpdateUser(ctx context.Context, params *UpdateUserParams) (err error)
}

func RegisterUserServer(server UserServer, serveMux *http.ServeMux, serverOptions apicommon.ServerOptions) {
	serverOptions.Sanitize()
	var rpcFiltersTable [4][]apicommon.RPCHandler
	apicommon.FillRPCFiltersTable(rpcFiltersTable[:], serverOptions.RPCFilters)
	{
		rpcFilters := rpcFiltersTable[User_CreateUser]
		incomingRPCFactory := func() *apicommon.IncomingRPC {
			var s struct {
				IncomingRPC apicommon.IncomingRPC
				Params      CreateUserParams
			}
			rpcHandler := func(ctx context.Context, rpc *apicommon.RPC) error {
				return server.CreateUser(ctx, rpc.Params().(*CreateUserParams))
			}
			s.IncomingRPC.Init("Petstore", "User", "CreateUser", "Petstore.User.CreateUser", &s.Params, nil, rpcHandler, rpcFilters)
			return &s.IncomingRPC
		}
		handler := apicommon.MakeHandler(serverOptions.Middlewares, User_CreateUser, incomingRPCFactory, serverOptions.TraceIDGenerator)
		serveMux.Handle("/rpc/Petstore.User.CreateUser", handler)
	}
	{
		rpcFilters := rpcFiltersTable[User_GetUser]
		incomingRPCFactory := func() *apicommon.IncomingRPC {
			var s struct {
				IncomingRPC apicommon.IncomingRPC
				Params      GetUserParams
				Results     GetUserResults
			}
			rpcHandler := func(ctx context.Context, rpc *apicommon.RPC) error {
				return server.GetUser(ctx, rpc.Params().(*GetUserParams), rpc.Results().(*GetUserResults))
			}
			s.IncomingRPC.Init("Petstore", "User", "GetUser", "Petstore.User.GetUser", &s.Params, &s.Results, rpcHandler, rpcFilters)
			return &s.IncomingRPC
		}
		handler := apicommon.MakeHandler(serverOptions.Middlewares, User_GetUser, incomingRPCFactory, serverOptions.TraceIDGenerator)
		serveMux.Handle("/rpc/Petstore.User.GetUser", handler)
	}
	{
		rpcFilters := rpcFiltersTable[User_GetUsers]
		incomingRPCFactory := func() *apicommon.IncomingRPC {
			var s struct {
				IncomingRPC apicommon.IncomingRPC
				Params      GetUsersParams
				Results     GetUsersResults
			}
			rpcHandler := func(ctx context.Context, rpc *apicommon.RPC) error {
				return server.GetUsers(ctx, rpc.Params().(*GetUsersParams), rpc.Results().(*GetUsersResults))
			}
			s.IncomingRPC.Init("Petstore", "User", "GetUsers", "Petstore.User.GetUsers", &s.Params, &s.Results, rpcHandler, rpcFilters)
			return &s.IncomingRPC
		}
		handler := apicommon.MakeHandler(serverOptions.Middlewares, User_GetUsers, incomingRPCFactory, serverOptions.TraceIDGenerator)
		serveMux.Handle("/rpc/Petstore.User.GetUsers", handler)
	}
	{
		rpcFilters := rpcFiltersTable[User_UpdateUser]
		incomingRPCFactory := func() *apicommon.IncomingRPC {
			var s struct {
				IncomingRPC apicommon.IncomingRPC
				Params      UpdateUserParams
			}
			rpcHandler := func(ctx context.Context, rpc *apicommon.RPC) error {
				return server.UpdateUser(ctx, rpc.Params().(*UpdateUserParams))
			}
			s.IncomingRPC.Init("Petstore", "User", "UpdateUser", "Petstore.User.UpdateUser", &s.Params, nil, rpcHandler, rpcFilters)
			return &s.IncomingRPC
		}
		handler := apicommon.MakeHandler(serverOptions.Middlewares, User_UpdateUser, incomingRPCFactory, serverOptions.TraceIDGenerator)
		serveMux.Handle("/rpc/Petstore.User.UpdateUser", handler)
	}
}

type UserServerFuncs struct {
	CreateUserFunc func(context.Context, *CreateUserParams) error
	GetUserFunc    func(context.Context, *GetUserParams, *GetUserResults) error
	GetUsersFunc   func(context.Context, *GetUsersParams, *GetUsersResults) error
	UpdateUserFunc func(context.Context, *UpdateUserParams) error
}

var _ UserServer = (*UserServerFuncs)(nil)

func (sf *UserServerFuncs) CreateUser(ctx context.Context, params *CreateUserParams) error {
	f := sf.CreateUserFunc
	if f == nil {
		return apicommon.ErrNotImplemented
	}
	return f(ctx, params)
}

func (sf *UserServerFuncs) GetUser(ctx context.Context, params *GetUserParams, results *GetUserResults) error {
	f := sf.GetUserFunc
	if f == nil {
		return apicommon.ErrNotImplemented
	}
	return f(ctx, params, results)
}

func (sf *UserServerFuncs) GetUsers(ctx context.Context, params *GetUsersParams, results *GetUsersResults) error {
	f := sf.GetUsersFunc
	if f == nil {
		return apicommon.ErrNotImplemented
	}
	return f(ctx, params, results)
}

func (sf *UserServerFuncs) UpdateUser(ctx context.Context, params *UpdateUserParams) error {
	f := sf.UpdateUserFunc
	if f == nil {
		return apicommon.ErrNotImplemented
	}
	return f(ctx, params)
}
