// Code generated by jrohc. DO NOT EDIT.

package petstoreapi

import (
	fmt "fmt"
	apicommon "github.com/go-tk/jroh/go/apicommon"
	regexp "regexp"
	strconv "strconv"
)

type AddPetParams struct {
	Pet Pet `json:"pet"`
}

var _ apicommon.Validator = (*AddPetParams)(nil)

func (m *AddPetParams) Validate(validationContext *apicommon.ValidationContext) bool {
	{
		validationContext.Enter("pet")
		if !m.Pet.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	return true
}

type GetPetParams struct {
	PetID PetID `json:"petID"`
}

var _ apicommon.Validator = (*GetPetParams)(nil)

func (m *GetPetParams) Validate(validationContext *apicommon.ValidationContext) bool {
	{
		validationContext.Enter("petID")
		if !m.PetID.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	return true
}

type GetPetResults struct {
	Pet Pet `json:"pet"`
}

var _ apicommon.Validator = (*GetPetResults)(nil)

func (m *GetPetResults) Validate(validationContext *apicommon.ValidationContext) bool {
	{
		validationContext.Enter("pet")
		if !m.Pet.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	return true
}

type GetPetsParams struct {
	PetIDs []PetID `json:"petIDs"`
}

var _ apicommon.Validator = (*GetPetsParams)(nil)

func (m *GetPetsParams) Validate(validationContext *apicommon.ValidationContext) bool {
	{
		validationContext.Enter("petIDs")
		if len(m.PetIDs) < 1 {
			validationContext.SetErrorDetails("length < 1")
			return false
		}
		if len(m.PetIDs) > 30 {
			validationContext.SetErrorDetails("length > 30")
			return false
		}
		for i := range m.PetIDs {
			v := &m.PetIDs[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	return true
}

type GetPetsResults struct {
	Pets []Pet `json:"pets,omitempty"`
}

var _ apicommon.Validator = (*GetPetsResults)(nil)

func (m *GetPetsResults) Validate(validationContext *apicommon.ValidationContext) bool {
	{
		validationContext.Enter("pets")
		for i := range m.Pets {
			v := &m.Pets[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	return true
}

type UpdatePetParams struct {
	PetPatch PetPatch `json:"petPatch"`
}

var _ apicommon.Validator = (*UpdatePetParams)(nil)

func (m *UpdatePetParams) Validate(validationContext *apicommon.ValidationContext) bool {
	{
		validationContext.Enter("petPatch")
		if !m.PetPatch.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	return true
}

type FindPetsParams struct {
	PetStatus PetStatus `json:"petStatus"`
}

var _ apicommon.Validator = (*FindPetsParams)(nil)

func (m *FindPetsParams) Validate(validationContext *apicommon.ValidationContext) bool {
	{
		validationContext.Enter("petStatus")
		if !m.PetStatus.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	return true
}

type FindPetsResults struct {
	Pets []Pet `json:"pets,omitempty"`
}

var _ apicommon.Validator = (*FindPetsResults)(nil)

func (m *FindPetsResults) Validate(validationContext *apicommon.ValidationContext) bool {
	{
		validationContext.Enter("pets")
		for i := range m.Pets {
			v := &m.Pets[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	return true
}

type CreateOrderParams struct {
	Order Order `json:"order"`
}

var _ apicommon.Validator = (*CreateOrderParams)(nil)

func (m *CreateOrderParams) Validate(validationContext *apicommon.ValidationContext) bool {
	{
		validationContext.Enter("order")
		if !m.Order.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	return true
}

type CreateOrderResults struct {
	OrderID OrderID `json:"orderID"`
}

var _ apicommon.Validator = (*CreateOrderResults)(nil)

func (m *CreateOrderResults) Validate(validationContext *apicommon.ValidationContext) bool {
	{
		validationContext.Enter("orderID")
		if !m.OrderID.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	return true
}

type GetOrderParams struct {
	OrderID OrderID `json:"orderID"`
}

var _ apicommon.Validator = (*GetOrderParams)(nil)

func (m *GetOrderParams) Validate(validationContext *apicommon.ValidationContext) bool {
	{
		validationContext.Enter("orderID")
		if !m.OrderID.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	return true
}

type GetOrderResults struct {
	Order Order `json:"order"`
}

var _ apicommon.Validator = (*GetOrderResults)(nil)

func (m *GetOrderResults) Validate(validationContext *apicommon.ValidationContext) bool {
	{
		validationContext.Enter("order")
		if !m.Order.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	return true
}

type CreateUserParams struct {
	User User `json:"user"`
}

var _ apicommon.Validator = (*CreateUserParams)(nil)

func (m *CreateUserParams) Validate(validationContext *apicommon.ValidationContext) bool {
	{
		validationContext.Enter("user")
		if !m.User.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	return true
}

type GetUserParams struct {
	UserID UserID `json:"userID"`
}

var _ apicommon.Validator = (*GetUserParams)(nil)

func (m *GetUserParams) Validate(validationContext *apicommon.ValidationContext) bool {
	{
		validationContext.Enter("userID")
		if !m.UserID.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	return true
}

type GetUserResults struct {
	User User `json:"user"`
}

var _ apicommon.Validator = (*GetUserResults)(nil)

func (m *GetUserResults) Validate(validationContext *apicommon.ValidationContext) bool {
	{
		validationContext.Enter("user")
		if !m.User.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	return true
}

type GetUsersParams struct {
	UserIDs []UserID `json:"userIDs"`
}

var _ apicommon.Validator = (*GetUsersParams)(nil)

func (m *GetUsersParams) Validate(validationContext *apicommon.ValidationContext) bool {
	{
		validationContext.Enter("userIDs")
		if len(m.UserIDs) < 1 {
			validationContext.SetErrorDetails("length < 1")
			return false
		}
		if len(m.UserIDs) > 30 {
			validationContext.SetErrorDetails("length > 30")
			return false
		}
		for i := range m.UserIDs {
			v := &m.UserIDs[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	return true
}

type GetUsersResults struct {
	Users []User `json:"users,omitempty"`
}

var _ apicommon.Validator = (*GetUsersResults)(nil)

func (m *GetUsersResults) Validate(validationContext *apicommon.ValidationContext) bool {
	{
		validationContext.Enter("users")
		for i := range m.Users {
			v := &m.Users[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	return true
}

type UpdateUserParams struct {
	UserPatch UserPatch `json:"userPatch"`
}

var _ apicommon.Validator = (*UpdateUserParams)(nil)

func (m *UpdateUserParams) Validate(validationContext *apicommon.ValidationContext) bool {
	{
		validationContext.Enter("userPatch")
		if !m.UserPatch.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	return true
}

type Pet struct {
	ID     PetID     `json:"id"`
	Name   PetName   `json:"name"`
	Tags   []PetTag  `json:"tags"`
	Status PetStatus `json:"status"`
}

var _ apicommon.Validator = (*Pet)(nil)

func (m *Pet) Validate(validationContext *apicommon.ValidationContext) bool {
	{
		validationContext.Enter("id")
		if !m.ID.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("name")
		if !m.Name.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("tags")
		if len(m.Tags) < 1 {
			validationContext.SetErrorDetails("length < 1")
			return false
		}
		for i := range m.Tags {
			v := &m.Tags[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("status")
		if !m.Status.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	return true
}

type PetPatch struct {
	ID     PetID      `json:"id"`
	Name   *PetName   `json:"name,omitempty"`
	Tags   []PetTag   `json:"tags,omitempty"`
	Status *PetStatus `json:"status,omitempty"`
}

var _ apicommon.Validator = (*PetPatch)(nil)

func (m *PetPatch) Validate(validationContext *apicommon.ValidationContext) bool {
	{
		validationContext.Enter("id")
		if !m.ID.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.Name != nil {
		validationContext.Enter("name")
		if !m.Name.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("tags")
		for i := range m.Tags {
			v := &m.Tags[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	if m.Status != nil {
		validationContext.Enter("status")
		if !m.Status.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	return true
}

type PetID int64

var _ apicommon.Validator = PetID(0)

func (m PetID) Validate(validationContext *apicommon.ValidationContext) bool {
	if m < 1 {
		validationContext.SetErrorDetails("value < 1")
		return false
	}
	return true
}

type PetName string

var _ apicommon.Validator = PetName("")

func (m PetName) Validate(validationContext *apicommon.ValidationContext) bool {
	if len(m) < 1 {
		validationContext.SetErrorDetails("length < 1")
		return false
	}
	if len(m) > 63 {
		validationContext.SetErrorDetails("length > 63")
		return false
	}
	return true
}

type PetTag string

var _ apicommon.Validator = PetTag("")

func (m PetTag) Validate(validationContext *apicommon.ValidationContext) bool {
	if len(m) < 1 {
		validationContext.SetErrorDetails("length < 1")
		return false
	}
	if len(m) > 63 {
		validationContext.SetErrorDetails("length > 63")
		return false
	}
	return true
}

type PetStatus int32

const (
	PetAvailable PetStatus = 1
	PetPending   PetStatus = 2
	PetSold      PetStatus = 3
)

var _ fmt.Stringer = PetStatus(0)

func (m PetStatus) String() string {
	switch m {
	case PetAvailable:
		return "PetAvailable"
	case PetPending:
		return "PetPending"
	case PetSold:
		return "PetSold"
	default:
		return "PetStatus(" + strconv.FormatInt(int64(m), 10) + ")"
	}
}

var _ apicommon.Validator = PetStatus(0)

func (m PetStatus) Validate(validationContext *apicommon.ValidationContext) bool {
	switch m {
	case PetAvailable:
		return true
	case PetPending:
		return true
	case PetSold:
		return true
	default:
		validationContext.SetErrorDetails("value not in (1, 2, 3)")
		return false
	}
}

type Order struct {
	ID       OrderID     `json:"id"`
	PetID    PetID       `json:"petID"`
	Quantity int32       `json:"quantity"`
	Status   OrderStatus `json:"status"`
}

var _ apicommon.Validator = (*Order)(nil)

func (m *Order) Validate(validationContext *apicommon.ValidationContext) bool {
	{
		validationContext.Enter("id")
		if !m.ID.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("petID")
		if !m.PetID.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("status")
		if !m.Status.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	return true
}

type OrderID int64

var _ apicommon.Validator = OrderID(0)

func (m OrderID) Validate(validationContext *apicommon.ValidationContext) bool {
	if m < 1 {
		validationContext.SetErrorDetails("value < 1")
		return false
	}
	return true
}

type OrderStatus int32

const (
	OrderPlaced    OrderStatus = 1
	OrderApproved  OrderStatus = 2
	OrderDelivered OrderStatus = 3
)

var _ fmt.Stringer = OrderStatus(0)

func (m OrderStatus) String() string {
	switch m {
	case OrderPlaced:
		return "OrderPlaced"
	case OrderApproved:
		return "OrderApproved"
	case OrderDelivered:
		return "OrderDelivered"
	default:
		return "OrderStatus(" + strconv.FormatInt(int64(m), 10) + ")"
	}
}

var _ apicommon.Validator = OrderStatus(0)

func (m OrderStatus) Validate(validationContext *apicommon.ValidationContext) bool {
	switch m {
	case OrderPlaced:
		return true
	case OrderApproved:
		return true
	case OrderDelivered:
		return true
	default:
		validationContext.SetErrorDetails("value not in (1, 2, 3)")
		return false
	}
}

type User struct {
	ID        UserID    `json:"id"`
	FirstName FirstName `json:"firstName"`
	LastName  LastName  `json:"lastName"`
	Email     Email     `json:"email"`
	Phone     *Phone    `json:"phone,omitempty"`
	Password  Password  `json:"password"`
}

var _ apicommon.Validator = (*User)(nil)

func (m *User) Validate(validationContext *apicommon.ValidationContext) bool {
	{
		validationContext.Enter("id")
		if !m.ID.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("firstName")
		if !m.FirstName.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("lastName")
		if !m.LastName.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("email")
		if !m.Email.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.Phone != nil {
		validationContext.Enter("phone")
		if !m.Phone.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("password")
		if !m.Password.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	return true
}

type UserPatch struct {
	ID        UserID     `json:"id"`
	FirstName *FirstName `json:"firstName,omitempty"`
	LastName  *LastName  `json:"lastName,omitempty"`
	Email     *Email     `json:"email,omitempty"`
	Phone     *Phone     `json:"phone,omitempty"`
	Password  *Password  `json:"password,omitempty"`
}

var _ apicommon.Validator = (*UserPatch)(nil)

func (m *UserPatch) Validate(validationContext *apicommon.ValidationContext) bool {
	{
		validationContext.Enter("id")
		if !m.ID.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.FirstName != nil {
		validationContext.Enter("firstName")
		if !m.FirstName.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.LastName != nil {
		validationContext.Enter("lastName")
		if !m.LastName.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.Email != nil {
		validationContext.Enter("email")
		if !m.Email.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.Phone != nil {
		validationContext.Enter("phone")
		if !m.Phone.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.Password != nil {
		validationContext.Enter("password")
		if !m.Password.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	return true
}

type UserID string

var _ apicommon.Validator = UserID("")

func (m UserID) Validate(validationContext *apicommon.ValidationContext) bool {
	if len(m) < 1 {
		validationContext.SetErrorDetails("length < 1")
		return false
	}
	if len(m) > 31 {
		validationContext.SetErrorDetails("length > 31")
		return false
	}
	if !patterns[0].MatchString(string(m)) {
		validationContext.SetErrorDetails("value not matched to \"[a-z][a-z0-9]*\"")
		return false
	}
	return true
}

type FirstName string

var _ apicommon.Validator = FirstName("")

func (m FirstName) Validate(validationContext *apicommon.ValidationContext) bool {
	if len(m) < 1 {
		validationContext.SetErrorDetails("length < 1")
		return false
	}
	if len(m) > 63 {
		validationContext.SetErrorDetails("length > 63")
		return false
	}
	return true
}

type LastName string

var _ apicommon.Validator = LastName("")

func (m LastName) Validate(validationContext *apicommon.ValidationContext) bool {
	if len(m) < 1 {
		validationContext.SetErrorDetails("length < 1")
		return false
	}
	if len(m) > 63 {
		validationContext.SetErrorDetails("length > 63")
		return false
	}
	return true
}

type Email string

var _ apicommon.Validator = Email("")

func (m Email) Validate(validationContext *apicommon.ValidationContext) bool {
	if len(m) < 1 {
		validationContext.SetErrorDetails("length < 1")
		return false
	}
	if len(m) > 127 {
		validationContext.SetErrorDetails("length > 127")
		return false
	}
	if !patterns[1].MatchString(string(m)) {
		validationContext.SetErrorDetails("value not matched to \"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\\\.[a-zA-Z0-9-.]+\"")
		return false
	}
	return true
}

type Phone string

var _ apicommon.Validator = Phone("")

func (m Phone) Validate(validationContext *apicommon.ValidationContext) bool {
	if len(m) < 1 {
		validationContext.SetErrorDetails("length < 1")
		return false
	}
	if len(m) > 31 {
		validationContext.SetErrorDetails("length > 31")
		return false
	}
	if !patterns[2].MatchString(string(m)) {
		validationContext.SetErrorDetails("value not matched to \"\\\\+[0-9]+ [0-9]+\"")
		return false
	}
	return true
}

type Password string

var _ apicommon.Validator = Password("")

func (m Password) Validate(validationContext *apicommon.ValidationContext) bool {
	if len(m) < 6 {
		validationContext.SetErrorDetails("length < 6")
		return false
	}
	if len(m) > 31 {
		validationContext.SetErrorDetails("length > 31")
		return false
	}
	return true
}

var patterns = [...]*regexp.Regexp{
	0: regexp.MustCompile("^[a-z][a-z0-9]*$"),
	1: regexp.MustCompile("^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$"),
	2: regexp.MustCompile("^\\+[0-9]+ [0-9]+$"),
}
