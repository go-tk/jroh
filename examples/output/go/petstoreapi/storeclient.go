// Code generated by jrohc. DO NOT EDIT.

package petstoreapi

import (
	context "context"
	fmt "fmt"
	apicommon "github.com/go-tk/jroh/go/apicommon"
)

type StoreClient interface {
	CreateOrder(ctx context.Context, params *CreateOrderParams) (results *CreateOrderResults, err error)
	GetOrder(ctx context.Context, params *GetOrderParams) (results *GetOrderResults, err error)
}

type storeClient struct {
	rpcBaseURL      string
	options         apicommon.ClientOptions
	rpcFiltersTable [NumberOfStoreMethods][]apicommon.OutgoingRPCHandler
}

func NewStoreClient(rpcBaseURL string, options apicommon.ClientOptions) StoreClient {
	var c storeClient
	c.rpcBaseURL = rpcBaseURL
	c.options = options
	c.options.Sanitize()
	apicommon.FillOutgoingRPCFiltersTable(c.rpcFiltersTable[:], options.RPCFilters)
	return &c
}

func (c *storeClient) CreateOrder(ctx context.Context, params *CreateOrderParams) (*CreateOrderResults, error) {
	var s struct {
		rpc     apicommon.OutgoingRPC
		params  CreateOrderParams
		results CreateOrderResults
	}
	s.rpc.Namespace = "Petstore"
	s.rpc.ServiceName = "Store"
	s.rpc.MethodName = "CreateOrder"
	s.rpc.FullMethodName = "Petstore.Store.CreateOrder"
	s.rpc.MethodIndex = Store_CreateOrder
	s.params = *params
	s.rpc.Params = &s.params
	s.rpc.Results = &s.results
	if err := c.doRPC(ctx, &s.rpc, "/rpc/Petstore.Store.CreateOrder"); err != nil {
		return nil, fmt.Errorf("rpc failed; fullMethodName=\"Petstore.Store.CreateOrder\" traceID=%q: %w", s.rpc.TraceID, err)
	}
	return &s.results, nil
}

func (c *storeClient) GetOrder(ctx context.Context, params *GetOrderParams) (*GetOrderResults, error) {
	var s struct {
		rpc     apicommon.OutgoingRPC
		params  GetOrderParams
		results GetOrderResults
	}
	s.rpc.Namespace = "Petstore"
	s.rpc.ServiceName = "Store"
	s.rpc.MethodName = "GetOrder"
	s.rpc.FullMethodName = "Petstore.Store.GetOrder"
	s.rpc.MethodIndex = Store_GetOrder
	s.params = *params
	s.rpc.Params = &s.params
	s.rpc.Results = &s.results
	if err := c.doRPC(ctx, &s.rpc, "/rpc/Petstore.Store.GetOrder"); err != nil {
		return nil, fmt.Errorf("rpc failed; fullMethodName=\"Petstore.Store.GetOrder\" traceID=%q: %w", s.rpc.TraceID, err)
	}
	return &s.results, nil
}

func (c *storeClient) doRPC(ctx context.Context, rpc *apicommon.OutgoingRPC, rpcPath string) error {
	if timeout := c.options.Timeout; timeout >= 1 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithTimeout(ctx, timeout)
		defer cancel()
	}
	rpc.Transport = c.options.Transport
	rpc.URL = c.rpcBaseURL + rpcPath
	rpc.SetHandler(apicommon.HandleOutgoingRPC)
	rpc.SetFilters(c.rpcFiltersTable[rpc.MethodIndex])
	return rpc.Do(ctx)
}

type StoreClientFuncs struct {
	CreateOrderFunc func(context.Context, *CreateOrderParams) (*CreateOrderResults, error)
	GetOrderFunc    func(context.Context, *GetOrderParams) (*GetOrderResults, error)
}

var _ StoreClient = (*StoreClientFuncs)(nil)

func (cf *StoreClientFuncs) CreateOrder(ctx context.Context, params *CreateOrderParams) (*CreateOrderResults, error) {
	if f := cf.CreateOrderFunc; f != nil {
		return f(ctx, params)
	}
	err := apicommon.NewNotImplementedError()
	return nil, fmt.Errorf("rpc failed; fullMethodName=\"Petstore.Store.GetOrder\": %w", err)
}

func (cf *StoreClientFuncs) GetOrder(ctx context.Context, params *GetOrderParams) (*GetOrderResults, error) {
	if f := cf.GetOrderFunc; f != nil {
		return f(ctx, params)
	}
	err := apicommon.NewNotImplementedError()
	return nil, fmt.Errorf("rpc failed; fullMethodName=\"Petstore.Store.GetOrder\": %w", err)
}
