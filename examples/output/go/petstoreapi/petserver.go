// Code generated by jrohc. DO NOT EDIT.

package petstoreapi

import (
	context "context"
	apicommon "github.com/go-tk/jroh/go/apicommon"
	http "net/http"
)

type PetServer interface {
	AddPet(ctx context.Context, params *AddPetParams) (err error)
	GetPet(ctx context.Context, params *GetPetParams, results *GetPetResults) (err error)
	GetPets(ctx context.Context, params *GetPetsParams, results *GetPetsResults) (err error)
	UpdatePet(ctx context.Context, params *UpdatePetParams) (err error)
	FindPets(ctx context.Context, params *FindPetsParams, results *FindPetsResults) (err error)
}

func RegisterPetServer(server PetServer, serveMux *http.ServeMux, serverOptions apicommon.ServerOptions) {
	serverOptions.Sanitize()
	var middlewareTable [5][]apicommon.Middleware
	apicommon.FillMiddlewareTable(middlewareTable[:], serverOptions.Middlewares)
	var rpcInterceptorTable [5][]apicommon.RPCHandler
	apicommon.FillRPCInterceptorTable(rpcInterceptorTable[:], serverOptions.RPCInterceptors)
	{
		middlewares := middlewareTable[Pet_AddPet]
		rpcInterceptors := rpcInterceptorTable[Pet_AddPet]
		incomingRPCFactory := func() *apicommon.IncomingRPC {
			var s struct {
				IncomingRPC apicommon.IncomingRPC
				Params      AddPetParams
			}
			rpcHandler := func(ctx context.Context, rpc *apicommon.RPC) error {
				return server.AddPet(ctx, rpc.Params().(*AddPetParams))
			}
			s.IncomingRPC.Init("Petstore", "Pet", "AddPet", &s.Params, nil, rpcHandler, rpcInterceptors)
			return &s.IncomingRPC
		}
		handler := apicommon.MakeHandler(middlewares, incomingRPCFactory, serverOptions.TraceIDGenerator)
		serveMux.Handle("/rpc/Petstore.Pet.AddPet", handler)
	}
	{
		middlewares := middlewareTable[Pet_GetPet]
		rpcInterceptors := rpcInterceptorTable[Pet_GetPet]
		incomingRPCFactory := func() *apicommon.IncomingRPC {
			var s struct {
				IncomingRPC apicommon.IncomingRPC
				Params      GetPetParams
				Results     GetPetResults
			}
			rpcHandler := func(ctx context.Context, rpc *apicommon.RPC) error {
				return server.GetPet(ctx, rpc.Params().(*GetPetParams), rpc.Results().(*GetPetResults))
			}
			s.IncomingRPC.Init("Petstore", "Pet", "GetPet", &s.Params, &s.Results, rpcHandler, rpcInterceptors)
			return &s.IncomingRPC
		}
		handler := apicommon.MakeHandler(middlewares, incomingRPCFactory, serverOptions.TraceIDGenerator)
		serveMux.Handle("/rpc/Petstore.Pet.GetPet", handler)
	}
	{
		middlewares := middlewareTable[Pet_GetPets]
		rpcInterceptors := rpcInterceptorTable[Pet_GetPets]
		incomingRPCFactory := func() *apicommon.IncomingRPC {
			var s struct {
				IncomingRPC apicommon.IncomingRPC
				Params      GetPetsParams
				Results     GetPetsResults
			}
			rpcHandler := func(ctx context.Context, rpc *apicommon.RPC) error {
				return server.GetPets(ctx, rpc.Params().(*GetPetsParams), rpc.Results().(*GetPetsResults))
			}
			s.IncomingRPC.Init("Petstore", "Pet", "GetPets", &s.Params, &s.Results, rpcHandler, rpcInterceptors)
			return &s.IncomingRPC
		}
		handler := apicommon.MakeHandler(middlewares, incomingRPCFactory, serverOptions.TraceIDGenerator)
		serveMux.Handle("/rpc/Petstore.Pet.GetPets", handler)
	}
	{
		middlewares := middlewareTable[Pet_UpdatePet]
		rpcInterceptors := rpcInterceptorTable[Pet_UpdatePet]
		incomingRPCFactory := func() *apicommon.IncomingRPC {
			var s struct {
				IncomingRPC apicommon.IncomingRPC
				Params      UpdatePetParams
			}
			rpcHandler := func(ctx context.Context, rpc *apicommon.RPC) error {
				return server.UpdatePet(ctx, rpc.Params().(*UpdatePetParams))
			}
			s.IncomingRPC.Init("Petstore", "Pet", "UpdatePet", &s.Params, nil, rpcHandler, rpcInterceptors)
			return &s.IncomingRPC
		}
		handler := apicommon.MakeHandler(middlewares, incomingRPCFactory, serverOptions.TraceIDGenerator)
		serveMux.Handle("/rpc/Petstore.Pet.UpdatePet", handler)
	}
	{
		middlewares := middlewareTable[Pet_FindPets]
		rpcInterceptors := rpcInterceptorTable[Pet_FindPets]
		incomingRPCFactory := func() *apicommon.IncomingRPC {
			var s struct {
				IncomingRPC apicommon.IncomingRPC
				Params      FindPetsParams
				Results     FindPetsResults
			}
			rpcHandler := func(ctx context.Context, rpc *apicommon.RPC) error {
				return server.FindPets(ctx, rpc.Params().(*FindPetsParams), rpc.Results().(*FindPetsResults))
			}
			s.IncomingRPC.Init("Petstore", "Pet", "FindPets", &s.Params, &s.Results, rpcHandler, rpcInterceptors)
			return &s.IncomingRPC
		}
		handler := apicommon.MakeHandler(middlewares, incomingRPCFactory, serverOptions.TraceIDGenerator)
		serveMux.Handle("/rpc/Petstore.Pet.FindPets", handler)
	}
}

type PetServerFuncs struct {
	AddPetFunc    func(context.Context, *AddPetParams) error
	GetPetFunc    func(context.Context, *GetPetParams, *GetPetResults) error
	GetPetsFunc   func(context.Context, *GetPetsParams, *GetPetsResults) error
	UpdatePetFunc func(context.Context, *UpdatePetParams) error
	FindPetsFunc  func(context.Context, *FindPetsParams, *FindPetsResults) error
}

var _ PetServer = (*PetServerFuncs)(nil)

func (sf *PetServerFuncs) AddPet(ctx context.Context, params *AddPetParams) error {
	if f := sf.AddPetFunc; f != nil {
		return f(ctx, params)
	}
	return nil
}

func (sf *PetServerFuncs) GetPet(ctx context.Context, params *GetPetParams, results *GetPetResults) error {
	if f := sf.GetPetFunc; f != nil {
		return f(ctx, params, results)
	}
	return nil
}

func (sf *PetServerFuncs) GetPets(ctx context.Context, params *GetPetsParams, results *GetPetsResults) error {
	if f := sf.GetPetsFunc; f != nil {
		return f(ctx, params, results)
	}
	return nil
}

func (sf *PetServerFuncs) UpdatePet(ctx context.Context, params *UpdatePetParams) error {
	if f := sf.UpdatePetFunc; f != nil {
		return f(ctx, params)
	}
	return nil
}

func (sf *PetServerFuncs) FindPets(ctx context.Context, params *FindPetsParams, results *FindPetsResults) error {
	if f := sf.FindPetsFunc; f != nil {
		return f(ctx, params, results)
	}
	return nil
}
