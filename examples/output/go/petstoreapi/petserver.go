// Code generated by jrohc. DO NOT EDIT.

package petstoreapi

import (
	context "context"
	apicommon "github.com/go-tk/jroh/go/apicommon"
)

type PetServer interface {
	AddPet(ctx context.Context, params *AddPetParams) (err error)
	GetPet(ctx context.Context, params *GetPetParams, results *GetPetResults) (err error)
	GetPets(ctx context.Context, params *GetPetsParams, results *GetPetsResults) (err error)
	UpdatePet(ctx context.Context, params *UpdatePetParams) (err error)
	FindPets(ctx context.Context, params *FindPetsParams, results *FindPetsResults) (err error)
}

func RegisterPetServer(server PetServer, router *apicommon.Router, serverOptions apicommon.ServerOptions) {
	serverOptions.Sanitize()
	var serverMiddlewareTable [5][]apicommon.ServerMiddleware
	apicommon.FillServerMiddlewareTable(serverMiddlewareTable[:], serverOptions.Middlewares)
	var rpcFiltersTable [5][]apicommon.RPCHandler
	apicommon.FillRPCFiltersTable(rpcFiltersTable[:], serverOptions.RPCFilters)
	{
		serverMiddlewares := serverMiddlewareTable[Pet_AddPet]
		rpcFilters := rpcFiltersTable[Pet_AddPet]
		incomingRPCFactory := func() *apicommon.IncomingRPC {
			var s struct {
				IncomingRPC apicommon.IncomingRPC
				Params      AddPetParams
			}
			rpcHandler := func(ctx context.Context, rpc *apicommon.RPC) error {
				return server.AddPet(ctx, rpc.Params().(*AddPetParams))
			}
			s.IncomingRPC.Init("Petstore", "Pet", "AddPet", "Petstore.Pet.AddPet", Pet_AddPet, &s.Params, nil, rpcHandler, rpcFilters)
			return &s.IncomingRPC
		}
		handler := apicommon.MakeHandler(serverMiddlewares, incomingRPCFactory, serverOptions.TraceIDGenerator)
		router.AddRoute("/rpc/Petstore.Pet.AddPet", handler, "Petstore.Pet.AddPet", serverMiddlewares, rpcFilters)
	}
	{
		serverMiddlewares := serverMiddlewareTable[Pet_GetPet]
		rpcFilters := rpcFiltersTable[Pet_GetPet]
		incomingRPCFactory := func() *apicommon.IncomingRPC {
			var s struct {
				IncomingRPC apicommon.IncomingRPC
				Params      GetPetParams
				Results     GetPetResults
			}
			rpcHandler := func(ctx context.Context, rpc *apicommon.RPC) error {
				return server.GetPet(ctx, rpc.Params().(*GetPetParams), rpc.Results().(*GetPetResults))
			}
			s.IncomingRPC.Init("Petstore", "Pet", "GetPet", "Petstore.Pet.GetPet", Pet_GetPet, &s.Params, &s.Results, rpcHandler, rpcFilters)
			return &s.IncomingRPC
		}
		handler := apicommon.MakeHandler(serverMiddlewares, incomingRPCFactory, serverOptions.TraceIDGenerator)
		router.AddRoute("/rpc/Petstore.Pet.GetPet", handler, "Petstore.Pet.GetPet", serverMiddlewares, rpcFilters)
	}
	{
		serverMiddlewares := serverMiddlewareTable[Pet_GetPets]
		rpcFilters := rpcFiltersTable[Pet_GetPets]
		incomingRPCFactory := func() *apicommon.IncomingRPC {
			var s struct {
				IncomingRPC apicommon.IncomingRPC
				Params      GetPetsParams
				Results     GetPetsResults
			}
			rpcHandler := func(ctx context.Context, rpc *apicommon.RPC) error {
				return server.GetPets(ctx, rpc.Params().(*GetPetsParams), rpc.Results().(*GetPetsResults))
			}
			s.IncomingRPC.Init("Petstore", "Pet", "GetPets", "Petstore.Pet.GetPets", Pet_GetPets, &s.Params, &s.Results, rpcHandler, rpcFilters)
			return &s.IncomingRPC
		}
		handler := apicommon.MakeHandler(serverMiddlewares, incomingRPCFactory, serverOptions.TraceIDGenerator)
		router.AddRoute("/rpc/Petstore.Pet.GetPets", handler, "Petstore.Pet.GetPets", serverMiddlewares, rpcFilters)
	}
	{
		serverMiddlewares := serverMiddlewareTable[Pet_UpdatePet]
		rpcFilters := rpcFiltersTable[Pet_UpdatePet]
		incomingRPCFactory := func() *apicommon.IncomingRPC {
			var s struct {
				IncomingRPC apicommon.IncomingRPC
				Params      UpdatePetParams
			}
			rpcHandler := func(ctx context.Context, rpc *apicommon.RPC) error {
				return server.UpdatePet(ctx, rpc.Params().(*UpdatePetParams))
			}
			s.IncomingRPC.Init("Petstore", "Pet", "UpdatePet", "Petstore.Pet.UpdatePet", Pet_UpdatePet, &s.Params, nil, rpcHandler, rpcFilters)
			return &s.IncomingRPC
		}
		handler := apicommon.MakeHandler(serverMiddlewares, incomingRPCFactory, serverOptions.TraceIDGenerator)
		router.AddRoute("/rpc/Petstore.Pet.UpdatePet", handler, "Petstore.Pet.UpdatePet", serverMiddlewares, rpcFilters)
	}
	{
		serverMiddlewares := serverMiddlewareTable[Pet_FindPets]
		rpcFilters := rpcFiltersTable[Pet_FindPets]
		incomingRPCFactory := func() *apicommon.IncomingRPC {
			var s struct {
				IncomingRPC apicommon.IncomingRPC
				Params      FindPetsParams
				Results     FindPetsResults
			}
			rpcHandler := func(ctx context.Context, rpc *apicommon.RPC) error {
				return server.FindPets(ctx, rpc.Params().(*FindPetsParams), rpc.Results().(*FindPetsResults))
			}
			s.IncomingRPC.Init("Petstore", "Pet", "FindPets", "Petstore.Pet.FindPets", Pet_FindPets, &s.Params, &s.Results, rpcHandler, rpcFilters)
			return &s.IncomingRPC
		}
		handler := apicommon.MakeHandler(serverMiddlewares, incomingRPCFactory, serverOptions.TraceIDGenerator)
		router.AddRoute("/rpc/Petstore.Pet.FindPets", handler, "Petstore.Pet.FindPets", serverMiddlewares, rpcFilters)
	}
}

type PetServerFuncs struct {
	AddPetFunc    func(context.Context, *AddPetParams) error
	GetPetFunc    func(context.Context, *GetPetParams, *GetPetResults) error
	GetPetsFunc   func(context.Context, *GetPetsParams, *GetPetsResults) error
	UpdatePetFunc func(context.Context, *UpdatePetParams) error
	FindPetsFunc  func(context.Context, *FindPetsParams, *FindPetsResults) error
}

var _ PetServer = (*PetServerFuncs)(nil)

func (sf *PetServerFuncs) AddPet(ctx context.Context, params *AddPetParams) error {
	f := sf.AddPetFunc
	if f == nil {
		return apicommon.ErrNotImplemented
	}
	return f(ctx, params)
}

func (sf *PetServerFuncs) GetPet(ctx context.Context, params *GetPetParams, results *GetPetResults) error {
	f := sf.GetPetFunc
	if f == nil {
		return apicommon.ErrNotImplemented
	}
	return f(ctx, params, results)
}

func (sf *PetServerFuncs) GetPets(ctx context.Context, params *GetPetsParams, results *GetPetsResults) error {
	f := sf.GetPetsFunc
	if f == nil {
		return apicommon.ErrNotImplemented
	}
	return f(ctx, params, results)
}

func (sf *PetServerFuncs) UpdatePet(ctx context.Context, params *UpdatePetParams) error {
	f := sf.UpdatePetFunc
	if f == nil {
		return apicommon.ErrNotImplemented
	}
	return f(ctx, params)
}

func (sf *PetServerFuncs) FindPets(ctx context.Context, params *FindPetsParams, results *FindPetsResults) error {
	f := sf.FindPetsFunc
	if f == nil {
		return apicommon.ErrNotImplemented
	}
	return f(ctx, params, results)
}
