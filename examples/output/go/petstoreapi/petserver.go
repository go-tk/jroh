// Code generated by jrohc. DO NOT EDIT.

package petstoreapi

import (
	context "context"
	apicommon "github.com/go-tk/jroh/go/apicommon"
	http "net/http"
)

type PetServer interface {
	AddPet(ctx context.Context, params *AddPetParams) (err error)
	GetPet(ctx context.Context, params *GetPetParams, results *GetPetResults) (err error)
	GetPets(ctx context.Context, params *GetPetsParams, results *GetPetsResults) (err error)
	UpdatePet(ctx context.Context, params *UpdatePetParams) (err error)
	FindPets(ctx context.Context, params *FindPetsParams, results *FindPetsResults) (err error)
}

func RegisterPetServer(server PetServer, router *apicommon.Router, options apicommon.ServerOptions) {
	options.Sanitize()
	var rpcFiltersTable [NumberOfPetMethods][]apicommon.IncomingRPCHandler
	apicommon.FillIncomingRPCFiltersTable(rpcFiltersTable[:], options.RPCFilters)
	{
		rpcFilters := rpcFiltersTable[Pet_AddPet]
		handler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			var s struct {
				rpc     apicommon.IncomingRPC
				params  AddPetParams
				results apicommon.DummyModel
			}
			s.rpc.Namespace = "Petstore"
			s.rpc.ServiceName = "Pet"
			s.rpc.MethodName = "AddPet"
			s.rpc.FullMethodName = "Petstore.Pet.AddPet"
			s.rpc.MethodIndex = Pet_AddPet
			s.rpc.Params = &s.params
			s.rpc.Results = &s.results
			s.rpc.SetHandler(func(ctx context.Context, rpc *apicommon.IncomingRPC) error {
				return server.AddPet(ctx, rpc.Params.(*AddPetParams))
			})
			s.rpc.SetFilters(rpcFilters)
			apicommon.HandleRequest(r, &s.rpc, options.TraceIDGenerator, w)
		})
		router.AddRoute("/rpc/Petstore.Pet.AddPet", handler, "Petstore.Pet.AddPet", rpcFilters)
	}
	{
		rpcFilters := rpcFiltersTable[Pet_GetPet]
		handler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			var s struct {
				rpc     apicommon.IncomingRPC
				params  GetPetParams
				results GetPetResults
			}
			s.rpc.Namespace = "Petstore"
			s.rpc.ServiceName = "Pet"
			s.rpc.MethodName = "GetPet"
			s.rpc.FullMethodName = "Petstore.Pet.GetPet"
			s.rpc.MethodIndex = Pet_GetPet
			s.rpc.Params = &s.params
			s.rpc.Results = &s.results
			s.rpc.SetHandler(func(ctx context.Context, rpc *apicommon.IncomingRPC) error {
				return server.GetPet(ctx, rpc.Params.(*GetPetParams), rpc.Results.(*GetPetResults))
			})
			s.rpc.SetFilters(rpcFilters)
			apicommon.HandleRequest(r, &s.rpc, options.TraceIDGenerator, w)
		})
		router.AddRoute("/rpc/Petstore.Pet.GetPet", handler, "Petstore.Pet.GetPet", rpcFilters)
	}
	{
		rpcFilters := rpcFiltersTable[Pet_GetPets]
		handler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			var s struct {
				rpc     apicommon.IncomingRPC
				params  GetPetsParams
				results GetPetsResults
			}
			s.rpc.Namespace = "Petstore"
			s.rpc.ServiceName = "Pet"
			s.rpc.MethodName = "GetPets"
			s.rpc.FullMethodName = "Petstore.Pet.GetPets"
			s.rpc.MethodIndex = Pet_GetPets
			s.rpc.Params = &s.params
			s.rpc.Results = &s.results
			s.rpc.SetHandler(func(ctx context.Context, rpc *apicommon.IncomingRPC) error {
				return server.GetPets(ctx, rpc.Params.(*GetPetsParams), rpc.Results.(*GetPetsResults))
			})
			s.rpc.SetFilters(rpcFilters)
			apicommon.HandleRequest(r, &s.rpc, options.TraceIDGenerator, w)
		})
		router.AddRoute("/rpc/Petstore.Pet.GetPets", handler, "Petstore.Pet.GetPets", rpcFilters)
	}
	{
		rpcFilters := rpcFiltersTable[Pet_UpdatePet]
		handler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			var s struct {
				rpc     apicommon.IncomingRPC
				params  UpdatePetParams
				results apicommon.DummyModel
			}
			s.rpc.Namespace = "Petstore"
			s.rpc.ServiceName = "Pet"
			s.rpc.MethodName = "UpdatePet"
			s.rpc.FullMethodName = "Petstore.Pet.UpdatePet"
			s.rpc.MethodIndex = Pet_UpdatePet
			s.rpc.Params = &s.params
			s.rpc.Results = &s.results
			s.rpc.SetHandler(func(ctx context.Context, rpc *apicommon.IncomingRPC) error {
				return server.UpdatePet(ctx, rpc.Params.(*UpdatePetParams))
			})
			s.rpc.SetFilters(rpcFilters)
			apicommon.HandleRequest(r, &s.rpc, options.TraceIDGenerator, w)
		})
		router.AddRoute("/rpc/Petstore.Pet.UpdatePet", handler, "Petstore.Pet.UpdatePet", rpcFilters)
	}
	{
		rpcFilters := rpcFiltersTable[Pet_FindPets]
		handler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			var s struct {
				rpc     apicommon.IncomingRPC
				params  FindPetsParams
				results FindPetsResults
			}
			s.rpc.Namespace = "Petstore"
			s.rpc.ServiceName = "Pet"
			s.rpc.MethodName = "FindPets"
			s.rpc.FullMethodName = "Petstore.Pet.FindPets"
			s.rpc.MethodIndex = Pet_FindPets
			s.rpc.Params = &s.params
			s.rpc.Results = &s.results
			s.rpc.SetHandler(func(ctx context.Context, rpc *apicommon.IncomingRPC) error {
				return server.FindPets(ctx, rpc.Params.(*FindPetsParams), rpc.Results.(*FindPetsResults))
			})
			s.rpc.SetFilters(rpcFilters)
			apicommon.HandleRequest(r, &s.rpc, options.TraceIDGenerator, w)
		})
		router.AddRoute("/rpc/Petstore.Pet.FindPets", handler, "Petstore.Pet.FindPets", rpcFilters)
	}
}

type PetServerFuncs struct {
	AddPetFunc    func(context.Context, *AddPetParams) error
	GetPetFunc    func(context.Context, *GetPetParams, *GetPetResults) error
	GetPetsFunc   func(context.Context, *GetPetsParams, *GetPetsResults) error
	UpdatePetFunc func(context.Context, *UpdatePetParams) error
	FindPetsFunc  func(context.Context, *FindPetsParams, *FindPetsResults) error
}

var _ PetServer = (*PetServerFuncs)(nil)

func (sf *PetServerFuncs) AddPet(ctx context.Context, params *AddPetParams) error {
	if f := sf.AddPetFunc; f != nil {
		return f(ctx, params)
	}
	return apicommon.NewNotImplementedError()
}

func (sf *PetServerFuncs) GetPet(ctx context.Context, params *GetPetParams, results *GetPetResults) error {
	if f := sf.GetPetFunc; f != nil {
		return f(ctx, params, results)
	}
	return apicommon.NewNotImplementedError()
}

func (sf *PetServerFuncs) GetPets(ctx context.Context, params *GetPetsParams, results *GetPetsResults) error {
	if f := sf.GetPetsFunc; f != nil {
		return f(ctx, params, results)
	}
	return apicommon.NewNotImplementedError()
}

func (sf *PetServerFuncs) UpdatePet(ctx context.Context, params *UpdatePetParams) error {
	if f := sf.UpdatePetFunc; f != nil {
		return f(ctx, params)
	}
	return apicommon.NewNotImplementedError()
}

func (sf *PetServerFuncs) FindPets(ctx context.Context, params *FindPetsParams, results *FindPetsResults) error {
	if f := sf.FindPetsFunc; f != nil {
		return f(ctx, params, results)
	}
	return apicommon.NewNotImplementedError()
}
