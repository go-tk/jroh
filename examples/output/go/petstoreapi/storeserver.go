// Code generated by jrohc. DO NOT EDIT.

package petstoreapi

import (
	context "context"
	apicommon "github.com/go-tk/jroh/go/apicommon"
)

type StoreServer interface {
	CreateOrder(ctx context.Context, params *CreateOrderParams, results *CreateOrderResults) (err error)
	GetOrder(ctx context.Context, params *GetOrderParams, results *GetOrderResults) (err error)
}

func RegisterStoreServer(server StoreServer, router *apicommon.Router, serverOptions apicommon.ServerOptions) {
	serverOptions.Sanitize()
	var serverMiddlewareTable [2][]apicommon.ServerMiddleware
	apicommon.FillServerMiddlewareTable(serverMiddlewareTable[:], serverOptions.Middlewares)
	var rpcFiltersTable [2][]apicommon.RPCHandler
	apicommon.FillRPCFiltersTable(rpcFiltersTable[:], serverOptions.RPCFilters)
	{
		serverMiddlewares := serverMiddlewareTable[Store_CreateOrder]
		rpcFilters := rpcFiltersTable[Store_CreateOrder]
		incomingRPCFactory := func() *apicommon.IncomingRPC {
			var s struct {
				IncomingRPC apicommon.IncomingRPC
				Params      CreateOrderParams
				Results     CreateOrderResults
			}
			rpcHandler := func(ctx context.Context, rpc *apicommon.RPC) error {
				return server.CreateOrder(ctx, rpc.Params().(*CreateOrderParams), rpc.Results().(*CreateOrderResults))
			}
			s.IncomingRPC.Init("Petstore", "Store", "CreateOrder", "Petstore.Store.CreateOrder", Store_CreateOrder, &s.Params, &s.Results, rpcHandler, rpcFilters)
			return &s.IncomingRPC
		}
		handler := apicommon.MakeHandler(serverMiddlewares, incomingRPCFactory, serverOptions.TraceIDGenerator)
		router.AddRoute("/rpc/Petstore.Store.CreateOrder", handler, "Petstore.Store.CreateOrder", serverMiddlewares, rpcFilters)
	}
	{
		serverMiddlewares := serverMiddlewareTable[Store_GetOrder]
		rpcFilters := rpcFiltersTable[Store_GetOrder]
		incomingRPCFactory := func() *apicommon.IncomingRPC {
			var s struct {
				IncomingRPC apicommon.IncomingRPC
				Params      GetOrderParams
				Results     GetOrderResults
			}
			rpcHandler := func(ctx context.Context, rpc *apicommon.RPC) error {
				return server.GetOrder(ctx, rpc.Params().(*GetOrderParams), rpc.Results().(*GetOrderResults))
			}
			s.IncomingRPC.Init("Petstore", "Store", "GetOrder", "Petstore.Store.GetOrder", Store_GetOrder, &s.Params, &s.Results, rpcHandler, rpcFilters)
			return &s.IncomingRPC
		}
		handler := apicommon.MakeHandler(serverMiddlewares, incomingRPCFactory, serverOptions.TraceIDGenerator)
		router.AddRoute("/rpc/Petstore.Store.GetOrder", handler, "Petstore.Store.GetOrder", serverMiddlewares, rpcFilters)
	}
}

type StoreServerFuncs struct {
	CreateOrderFunc func(context.Context, *CreateOrderParams, *CreateOrderResults) error
	GetOrderFunc    func(context.Context, *GetOrderParams, *GetOrderResults) error
}

var _ StoreServer = (*StoreServerFuncs)(nil)

func (sf *StoreServerFuncs) CreateOrder(ctx context.Context, params *CreateOrderParams, results *CreateOrderResults) error {
	if f := sf.CreateOrderFunc; f != nil {
		return f(ctx, params, results)
	}
	return apicommon.ErrNotImplemented
}

func (sf *StoreServerFuncs) GetOrder(ctx context.Context, params *GetOrderParams, results *GetOrderResults) error {
	if f := sf.GetOrderFunc; f != nil {
		return f(ctx, params, results)
	}
	return apicommon.ErrNotImplemented
}
