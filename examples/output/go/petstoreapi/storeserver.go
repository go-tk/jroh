// Code generated by jrohc. DO NOT EDIT.

package petstoreapi

import (
	context "context"
	apicommon "github.com/go-tk/jroh/go/apicommon"
	http "net/http"
)

type StoreServer interface {
	CreateOrder(ctx context.Context, params *CreateOrderParams, results *CreateOrderResults) (err error)
	GetOrder(ctx context.Context, params *GetOrderParams, results *GetOrderResults) (err error)
}

func RegisterStoreServer(server StoreServer, router *apicommon.Router, options apicommon.ServerOptions) {
	options.Sanitize()
	var rpcFiltersTable [NumberOfStoreMethods][]apicommon.IncomingRPCHandler
	apicommon.FillIncomingRPCFiltersTable(rpcFiltersTable[:], options.RPCFilters)
	{
		rpcFilters := rpcFiltersTable[Store_CreateOrder]
		handler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			var s struct {
				rpc     apicommon.IncomingRPC
				params  CreateOrderParams
				results CreateOrderResults
			}
			s.rpc.Namespace = "Petstore"
			s.rpc.ServiceName = "Store"
			s.rpc.MethodName = "CreateOrder"
			s.rpc.FullMethodName = "Petstore.Store.CreateOrder"
			s.rpc.MethodIndex = Store_CreateOrder
			s.rpc.Params = &s.params
			s.rpc.Results = &s.results
			s.rpc.SetHandler(func(ctx context.Context, rpc *apicommon.IncomingRPC) error {
				return server.CreateOrder(ctx, rpc.Params.(*CreateOrderParams), rpc.Results.(*CreateOrderResults))
			})
			s.rpc.SetFilters(rpcFilters)
			apicommon.HandleRequest(r, &s.rpc, options.TraceIDGenerator, w)
		})
		router.AddRoute("/rpc/Petstore.Store.CreateOrder", handler, "Petstore.Store.CreateOrder", rpcFilters)
	}
	{
		rpcFilters := rpcFiltersTable[Store_GetOrder]
		handler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			var s struct {
				rpc     apicommon.IncomingRPC
				params  GetOrderParams
				results GetOrderResults
			}
			s.rpc.Namespace = "Petstore"
			s.rpc.ServiceName = "Store"
			s.rpc.MethodName = "GetOrder"
			s.rpc.FullMethodName = "Petstore.Store.GetOrder"
			s.rpc.MethodIndex = Store_GetOrder
			s.rpc.Params = &s.params
			s.rpc.Results = &s.results
			s.rpc.SetHandler(func(ctx context.Context, rpc *apicommon.IncomingRPC) error {
				return server.GetOrder(ctx, rpc.Params.(*GetOrderParams), rpc.Results.(*GetOrderResults))
			})
			s.rpc.SetFilters(rpcFilters)
			apicommon.HandleRequest(r, &s.rpc, options.TraceIDGenerator, w)
		})
		router.AddRoute("/rpc/Petstore.Store.GetOrder", handler, "Petstore.Store.GetOrder", rpcFilters)
	}
}

type StoreServerFuncs struct {
	CreateOrderFunc func(context.Context, *CreateOrderParams, *CreateOrderResults) error
	GetOrderFunc    func(context.Context, *GetOrderParams, *GetOrderResults) error
}

var _ StoreServer = (*StoreServerFuncs)(nil)

func (sf *StoreServerFuncs) CreateOrder(ctx context.Context, params *CreateOrderParams, results *CreateOrderResults) error {
	if f := sf.CreateOrderFunc; f != nil {
		return f(ctx, params, results)
	}
	return apicommon.NewNotImplementedError()
}

func (sf *StoreServerFuncs) GetOrder(ctx context.Context, params *GetOrderParams, results *GetOrderResults) error {
	if f := sf.GetOrderFunc; f != nil {
		return f(ctx, params, results)
	}
	return apicommon.NewNotImplementedError()
}
