// Code generated by jrohc. DO NOT EDIT.

package petstoreapi

import (
	context "context"
	fmt "fmt"
	apicommon "github.com/go-tk/jroh/go/apicommon"
)

type PetClient interface {
	AddPet(ctx context.Context, params *AddPetParams) (err error)
	GetPet(ctx context.Context, params *GetPetParams) (results *GetPetResults, err error)
	GetPets(ctx context.Context, params *GetPetsParams) (results *GetPetsResults, err error)
	UpdatePet(ctx context.Context, params *UpdatePetParams) (err error)
	FindPets(ctx context.Context, params *FindPetsParams) (results *FindPetsResults, err error)
}

type petClient struct {
	rpcBaseURL      string
	options         apicommon.ClientOptions
	rpcFiltersTable [NumberOfPetMethods][]apicommon.OutgoingRPCHandler
}

func NewPetClient(rpcBaseURL string, options apicommon.ClientOptions) PetClient {
	var c petClient
	c.rpcBaseURL = rpcBaseURL
	c.options = options
	c.options.Sanitize()
	apicommon.FillOutgoingRPCFiltersTable(c.rpcFiltersTable[:], options.RPCFilters)
	return &c
}

func (c *petClient) AddPet(ctx context.Context, params *AddPetParams) error {
	var a struct {
		rpc     apicommon.OutgoingRPC
		params  AddPetParams
		results apicommon.DummyModel
	}
	a.rpc.Namespace = "Petstore"
	a.rpc.ServiceName = "Pet"
	a.rpc.MethodName = "AddPet"
	a.rpc.FullMethodName = "Petstore.Pet.AddPet"
	a.rpc.MethodIndex = Pet_AddPet
	a.params = *params
	a.rpc.Params = &a.params
	a.rpc.Results = &a.results
	if err := c.doRPC(ctx, &a.rpc, "/rpc/Petstore.Pet.AddPet"); err != nil {
		return err
	}
	return nil
}

func (c *petClient) GetPet(ctx context.Context, params *GetPetParams) (*GetPetResults, error) {
	var a struct {
		rpc     apicommon.OutgoingRPC
		params  GetPetParams
		results GetPetResults
	}
	a.rpc.Namespace = "Petstore"
	a.rpc.ServiceName = "Pet"
	a.rpc.MethodName = "GetPet"
	a.rpc.FullMethodName = "Petstore.Pet.GetPet"
	a.rpc.MethodIndex = Pet_GetPet
	a.params = *params
	a.rpc.Params = &a.params
	a.rpc.Results = &a.results
	if err := c.doRPC(ctx, &a.rpc, "/rpc/Petstore.Pet.GetPet"); err != nil {
		return nil, err
	}
	return &a.results, nil
}

func (c *petClient) GetPets(ctx context.Context, params *GetPetsParams) (*GetPetsResults, error) {
	var a struct {
		rpc     apicommon.OutgoingRPC
		params  GetPetsParams
		results GetPetsResults
	}
	a.rpc.Namespace = "Petstore"
	a.rpc.ServiceName = "Pet"
	a.rpc.MethodName = "GetPets"
	a.rpc.FullMethodName = "Petstore.Pet.GetPets"
	a.rpc.MethodIndex = Pet_GetPets
	a.params = *params
	a.rpc.Params = &a.params
	a.rpc.Results = &a.results
	if err := c.doRPC(ctx, &a.rpc, "/rpc/Petstore.Pet.GetPets"); err != nil {
		return nil, err
	}
	return &a.results, nil
}

func (c *petClient) UpdatePet(ctx context.Context, params *UpdatePetParams) error {
	var a struct {
		rpc     apicommon.OutgoingRPC
		params  UpdatePetParams
		results apicommon.DummyModel
	}
	a.rpc.Namespace = "Petstore"
	a.rpc.ServiceName = "Pet"
	a.rpc.MethodName = "UpdatePet"
	a.rpc.FullMethodName = "Petstore.Pet.UpdatePet"
	a.rpc.MethodIndex = Pet_UpdatePet
	a.params = *params
	a.rpc.Params = &a.params
	a.rpc.Results = &a.results
	if err := c.doRPC(ctx, &a.rpc, "/rpc/Petstore.Pet.UpdatePet"); err != nil {
		return err
	}
	return nil
}

func (c *petClient) FindPets(ctx context.Context, params *FindPetsParams) (*FindPetsResults, error) {
	var a struct {
		rpc     apicommon.OutgoingRPC
		params  FindPetsParams
		results FindPetsResults
	}
	a.rpc.Namespace = "Petstore"
	a.rpc.ServiceName = "Pet"
	a.rpc.MethodName = "FindPets"
	a.rpc.FullMethodName = "Petstore.Pet.FindPets"
	a.rpc.MethodIndex = Pet_FindPets
	a.params = *params
	a.rpc.Params = &a.params
	a.rpc.Results = &a.results
	if err := c.doRPC(ctx, &a.rpc, "/rpc/Petstore.Pet.FindPets"); err != nil {
		return nil, err
	}
	return &a.results, nil
}

func (c *petClient) doRPC(ctx context.Context, rpc *apicommon.OutgoingRPC, rpcPath string) error {
	if timeout := c.options.Timeout; timeout >= 1 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithTimeout(ctx, timeout)
		defer cancel()
	}
	rpc.Transport = c.options.Transport
	rpc.URL = c.rpcBaseURL + rpcPath
	rpc.SetHandler(apicommon.HandleOutgoingRPC)
	rpc.SetFilters(c.rpcFiltersTable[rpc.MethodIndex])
	if err := rpc.Do(ctx); err != nil {
		return fmt.Errorf("rpc failed; fullMethodName=%q traceID=%q: %w", rpc.FullMethodName, rpc.TraceID, err)
	}
	return nil
}

type PetClientFuncs struct {
	AddPetFunc    func(context.Context, *AddPetParams) error
	GetPetFunc    func(context.Context, *GetPetParams) (*GetPetResults, error)
	GetPetsFunc   func(context.Context, *GetPetsParams) (*GetPetsResults, error)
	UpdatePetFunc func(context.Context, *UpdatePetParams) error
	FindPetsFunc  func(context.Context, *FindPetsParams) (*FindPetsResults, error)
}

var _ PetClient = (*PetClientFuncs)(nil)

func (cf *PetClientFuncs) AddPet(ctx context.Context, params *AddPetParams) error {
	if f := cf.AddPetFunc; f != nil {
		return f(ctx, params)
	}
	return apicommon.NewNotImplementedError()
}

func (cf *PetClientFuncs) GetPet(ctx context.Context, params *GetPetParams) (*GetPetResults, error) {
	if f := cf.GetPetFunc; f != nil {
		return f(ctx, params)
	}
	return nil, apicommon.NewNotImplementedError()
}

func (cf *PetClientFuncs) GetPets(ctx context.Context, params *GetPetsParams) (*GetPetsResults, error) {
	if f := cf.GetPetsFunc; f != nil {
		return f(ctx, params)
	}
	return nil, apicommon.NewNotImplementedError()
}

func (cf *PetClientFuncs) UpdatePet(ctx context.Context, params *UpdatePetParams) error {
	if f := cf.UpdatePetFunc; f != nil {
		return f(ctx, params)
	}
	return apicommon.NewNotImplementedError()
}

func (cf *PetClientFuncs) FindPets(ctx context.Context, params *FindPetsParams) (*FindPetsResults, error) {
	if f := cf.FindPetsFunc; f != nil {
		return f(ctx, params)
	}
	return nil, apicommon.NewNotImplementedError()
}
