// Code generated by jrohc. DO NOT EDIT.

package petstoreapi

import (
	context "context"
	fmt "fmt"
	apicommon "github.com/go-tk/jroh/go/apicommon"
)

type UserClient interface {
	CreateUser(ctx context.Context, params *CreateUserParams) (err error)
	GetUser(ctx context.Context, params *GetUserParams) (results *GetUserResults, err error)
	GetUsers(ctx context.Context, params *GetUsersParams) (results *GetUsersResults, err error)
	UpdateUser(ctx context.Context, params *UpdateUserParams) (err error)
}

type userClient struct {
	rpcBaseURL      string
	options         apicommon.ClientOptions
	rpcFiltersTable [NumberOfUserMethods][]apicommon.OutgoingRPCHandler
}

func NewUserClient(rpcBaseURL string, options apicommon.ClientOptions) UserClient {
	var c userClient
	c.rpcBaseURL = rpcBaseURL
	c.options = options
	c.options.Sanitize()
	apicommon.FillOutgoingRPCFiltersTable(c.rpcFiltersTable[:], options.RPCFilters)
	return &c
}

func (c *userClient) CreateUser(ctx context.Context, params *CreateUserParams) error {
	var s struct {
		rpc     apicommon.OutgoingRPC
		params  CreateUserParams
		results apicommon.DummyModel
	}
	s.rpc.Namespace = "Petstore"
	s.rpc.ServiceName = "User"
	s.rpc.MethodName = "CreateUser"
	s.rpc.FullMethodName = "Petstore.User.CreateUser"
	s.rpc.MethodIndex = User_CreateUser
	s.params = *params
	s.rpc.Params = &s.params
	s.rpc.Results = &s.results
	if err := c.doRPC(ctx, &s.rpc, "/rpc/Petstore.User.CreateUser"); err != nil {
		return fmt.Errorf("do rpc; fullMethodName=\"Petstore.User.CreateUser\" traceID=%q: %w", s.rpc.TraceID, err)
	}
	return nil
}

func (c *userClient) GetUser(ctx context.Context, params *GetUserParams) (*GetUserResults, error) {
	var s struct {
		rpc     apicommon.OutgoingRPC
		params  GetUserParams
		results GetUserResults
	}
	s.rpc.Namespace = "Petstore"
	s.rpc.ServiceName = "User"
	s.rpc.MethodName = "GetUser"
	s.rpc.FullMethodName = "Petstore.User.GetUser"
	s.rpc.MethodIndex = User_GetUser
	s.params = *params
	s.rpc.Params = &s.params
	s.rpc.Results = &s.results
	if err := c.doRPC(ctx, &s.rpc, "/rpc/Petstore.User.GetUser"); err != nil {
		return nil, fmt.Errorf("do rpc; fullMethodName=\"Petstore.User.GetUser\" traceID=%q: %w", s.rpc.TraceID, err)
	}
	return &s.results, nil
}

func (c *userClient) GetUsers(ctx context.Context, params *GetUsersParams) (*GetUsersResults, error) {
	var s struct {
		rpc     apicommon.OutgoingRPC
		params  GetUsersParams
		results GetUsersResults
	}
	s.rpc.Namespace = "Petstore"
	s.rpc.ServiceName = "User"
	s.rpc.MethodName = "GetUsers"
	s.rpc.FullMethodName = "Petstore.User.GetUsers"
	s.rpc.MethodIndex = User_GetUsers
	s.params = *params
	s.rpc.Params = &s.params
	s.rpc.Results = &s.results
	if err := c.doRPC(ctx, &s.rpc, "/rpc/Petstore.User.GetUsers"); err != nil {
		return nil, fmt.Errorf("do rpc; fullMethodName=\"Petstore.User.GetUsers\" traceID=%q: %w", s.rpc.TraceID, err)
	}
	return &s.results, nil
}

func (c *userClient) UpdateUser(ctx context.Context, params *UpdateUserParams) error {
	var s struct {
		rpc     apicommon.OutgoingRPC
		params  UpdateUserParams
		results apicommon.DummyModel
	}
	s.rpc.Namespace = "Petstore"
	s.rpc.ServiceName = "User"
	s.rpc.MethodName = "UpdateUser"
	s.rpc.FullMethodName = "Petstore.User.UpdateUser"
	s.rpc.MethodIndex = User_UpdateUser
	s.params = *params
	s.rpc.Params = &s.params
	s.rpc.Results = &s.results
	if err := c.doRPC(ctx, &s.rpc, "/rpc/Petstore.User.UpdateUser"); err != nil {
		return fmt.Errorf("do rpc; fullMethodName=\"Petstore.User.UpdateUser\" traceID=%q: %w", s.rpc.TraceID, err)
	}
	return nil
}

func (c *userClient) doRPC(ctx context.Context, rpc *apicommon.OutgoingRPC, rpcPath string) error {
	if timeout := c.options.Timeout; timeout >= 1 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithTimeout(ctx, timeout)
		defer cancel()
	}
	rpc.Transport = c.options.Transport
	rpc.URL = c.rpcBaseURL + rpcPath
	rpc.SetHandler(apicommon.HandleOutgoingRPC)
	rpc.SetFilters(c.rpcFiltersTable[rpc.MethodIndex])
	return rpc.Do(ctx)
}

type UserClientFuncs struct {
	CreateUserFunc func(context.Context, *CreateUserParams) error
	GetUserFunc    func(context.Context, *GetUserParams) (*GetUserResults, error)
	GetUsersFunc   func(context.Context, *GetUsersParams) (*GetUsersResults, error)
	UpdateUserFunc func(context.Context, *UpdateUserParams) error
}

var _ UserClient = (*UserClientFuncs)(nil)

func (cf *UserClientFuncs) CreateUser(ctx context.Context, params *CreateUserParams) error {
	if f := cf.CreateUserFunc; f != nil {
		return f(ctx, params)
	}
	err := apicommon.NewNotImplementedError()
	return fmt.Errorf("do rpc; fullMethodName=\"Petstore.User.UpdateUser\": %w", err)
}

func (cf *UserClientFuncs) GetUser(ctx context.Context, params *GetUserParams) (*GetUserResults, error) {
	if f := cf.GetUserFunc; f != nil {
		return f(ctx, params)
	}
	err := apicommon.NewNotImplementedError()
	return nil, fmt.Errorf("do rpc; fullMethodName=\"Petstore.User.UpdateUser\": %w", err)
}

func (cf *UserClientFuncs) GetUsers(ctx context.Context, params *GetUsersParams) (*GetUsersResults, error) {
	if f := cf.GetUsersFunc; f != nil {
		return f(ctx, params)
	}
	err := apicommon.NewNotImplementedError()
	return nil, fmt.Errorf("do rpc; fullMethodName=\"Petstore.User.UpdateUser\": %w", err)
}

func (cf *UserClientFuncs) UpdateUser(ctx context.Context, params *UpdateUserParams) error {
	if f := cf.UpdateUserFunc; f != nil {
		return f(ctx, params)
	}
	err := apicommon.NewNotImplementedError()
	return fmt.Errorf("do rpc; fullMethodName=\"Petstore.User.UpdateUser\": %w", err)
}
