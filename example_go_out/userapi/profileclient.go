// Code generated by jrohc. DO NOT EDIT.

package userapi

import (
	context "context"
	apicommon "github.com/go-tk/jroh/go/apicommon"
)

type ProfileClient interface {
	CreateProfile(ctx context.Context, params *CreateProfileParams) (resp CreateProfileResp, err error)
	GetProfile(ctx context.Context, params *GetProfileParams) (resp GetProfileResp, err error)
	UpdateProfile(ctx context.Context, params *UpdateProfileParams) (resp UpdateProfileResp, err error)
	DeleteProfile(ctx context.Context, params *DeleteProfileParams) (resp DeleteProfileResp, err error)
}

type profileClient struct {
	apicommon.Client

	rpcInterceptorTable [4][]apicommon.RPCHandler
}

func NewProfileClient(rpcBaseURL string, options apicommon.ClientOptions) ProfileClient {
	var c profileClient
	c.Init(rpcBaseURL, options)
	apicommon.FillRPCInterceptorTable(c.rpcInterceptorTable[:], options.RPCInterceptors)
	return &c
}

func (c *profileClient) CreateProfile(ctx context.Context, params *CreateProfileParams) (CreateProfileResp, error) {
	var s struct {
		OutgoingRPC apicommon.OutgoingRPC
		Params      CreateProfileParams
		Results     CreateProfileResults
	}
	s.Params = *params
	rpcInterceptors := c.rpcInterceptorTable[ProfileService_CreateProfile]
	s.OutgoingRPC.Init(
		"User",
		"Profile",
		"CreateProfile",
		&s.Params,
		&s.Results,
		apicommon.HandleRPC,
		rpcInterceptors,
	)
	error, err := c.DoRPC(ctx, &s.OutgoingRPC, "/rpc/Profile.DeleteProfile")
	if err != nil {
		return CreateProfileResp{}, err
	}
	if error != nil {
		return CreateProfileResp{
			TraceID: s.OutgoingRPC.TraceID(),
			Error:   error,
		}, nil
	}
	return CreateProfileResp{
		TraceID: s.OutgoingRPC.TraceID(),
		Results: &s.Results,
	}, nil
}

func (c *profileClient) GetProfile(ctx context.Context, params *GetProfileParams) (GetProfileResp, error) {
	var s struct {
		OutgoingRPC apicommon.OutgoingRPC
		Params      GetProfileParams
		Results     GetProfileResults
	}
	s.Params = *params
	rpcInterceptors := c.rpcInterceptorTable[ProfileService_GetProfile]
	s.OutgoingRPC.Init(
		"User",
		"Profile",
		"GetProfile",
		&s.Params,
		&s.Results,
		apicommon.HandleRPC,
		rpcInterceptors,
	)
	error, err := c.DoRPC(ctx, &s.OutgoingRPC, "/rpc/Profile.DeleteProfile")
	if err != nil {
		return GetProfileResp{}, err
	}
	if error != nil {
		return GetProfileResp{
			TraceID: s.OutgoingRPC.TraceID(),
			Error:   error,
		}, nil
	}
	return GetProfileResp{
		TraceID: s.OutgoingRPC.TraceID(),
		Results: &s.Results,
	}, nil
}

func (c *profileClient) UpdateProfile(ctx context.Context, params *UpdateProfileParams) (UpdateProfileResp, error) {
	var s struct {
		OutgoingRPC apicommon.OutgoingRPC
		Params      UpdateProfileParams
	}
	s.Params = *params
	rpcInterceptors := c.rpcInterceptorTable[ProfileService_UpdateProfile]
	s.OutgoingRPC.Init(
		"User",
		"Profile",
		"UpdateProfile",
		&s.Params,
		nil,
		apicommon.HandleRPC,
		rpcInterceptors,
	)
	error, err := c.DoRPC(ctx, &s.OutgoingRPC, "/rpc/Profile.DeleteProfile")
	if err != nil {
		return UpdateProfileResp{}, err
	}
	if error != nil {
		return UpdateProfileResp{
			TraceID: s.OutgoingRPC.TraceID(),
			Error:   error,
		}, nil
	}
	return UpdateProfileResp{
		TraceID: s.OutgoingRPC.TraceID(),
	}, nil
}

func (c *profileClient) DeleteProfile(ctx context.Context, params *DeleteProfileParams) (DeleteProfileResp, error) {
	var s struct {
		OutgoingRPC apicommon.OutgoingRPC
		Params      DeleteProfileParams
	}
	s.Params = *params
	rpcInterceptors := c.rpcInterceptorTable[ProfileService_DeleteProfile]
	s.OutgoingRPC.Init(
		"User",
		"Profile",
		"DeleteProfile",
		&s.Params,
		nil,
		apicommon.HandleRPC,
		rpcInterceptors,
	)
	error, err := c.DoRPC(ctx, &s.OutgoingRPC, "/rpc/Profile.DeleteProfile")
	if err != nil {
		return DeleteProfileResp{}, err
	}
	if error != nil {
		return DeleteProfileResp{
			TraceID: s.OutgoingRPC.TraceID(),
			Error:   error,
		}, nil
	}
	return DeleteProfileResp{
		TraceID: s.OutgoingRPC.TraceID(),
	}, nil
}
