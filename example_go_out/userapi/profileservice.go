// Code generated by jrohc. DO NOT EDIT.

package userapi

import (
	context "context"
	apicommon "github.com/go-tk/jroh/go/apicommon"
	http "net/http"
)

type ProfileService interface {
	CreateProfile(ctx context.Context, params *CreateProfileParams, results *CreateProfileResults) (err error)
	GetProfile(ctx context.Context, params *GetProfileParams, results *GetProfileResults) (err error)
	UpdateProfile(ctx context.Context, params *UpdateProfileParams) (err error)
	DeleteProfile(ctx context.Context, params *DeleteProfileParams) (err error)
}

type DummyProfileService struct{}

var _ ProfileService = DummyProfileService{}

func (DummyProfileService) CreateProfile(context.Context, *CreateProfileParams, *CreateProfileResults) error {
	return nil
}
func (DummyProfileService) GetProfile(context.Context, *GetProfileParams, *GetProfileResults) error {
	return nil
}
func (DummyProfileService) UpdateProfile(context.Context, *UpdateProfileParams) error { return nil }
func (DummyProfileService) DeleteProfile(context.Context, *DeleteProfileParams) error { return nil }

func RegisterHandlersOfProfileService(service ProfileService, serveMux *http.ServeMux, options apicommon.RegisterHandlersOptions) {
	options.Sanitize()
	var middlewareTable [4][]apicommon.Middleware
	apicommon.FillMiddlewareTable(middlewareTable[:], options.Middlewares)
	var rpcInterceptorTable [4][]apicommon.RPCHandler
	apicommon.FillRPCInterceptorTable(rpcInterceptorTable[:], options.RPCInterceptors)
	{
		middlewares := middlewareTable[ProfileService_CreateProfile]
		rpcInterceptors := rpcInterceptorTable[ProfileService_CreateProfile]
		incomingRPCFactory := func() *apicommon.IncomingRPC {
			var s struct {
				IncomingRPC apicommon.IncomingRPC
				Params      CreateProfileParams
				Results     CreateProfileResults
			}
			rpcHandler := func(ctx context.Context, rpc *apicommon.RPC) error {
				return service.CreateProfile(ctx, rpc.Params().(*CreateProfileParams), rpc.Results().(*CreateProfileResults))
			}
			s.IncomingRPC.Init(
				"User",
				"Profile",
				"CreateProfile",
				&s.Params,
				&s.Results,
				rpcHandler,
				rpcInterceptors,
			)
			return &s.IncomingRPC
		}
		handler := apicommon.MakeHandler(middlewares, incomingRPCFactory, options.TraceIDGenerator)
		serveMux.Handle("/rpc/Profile.CreateProfile", handler)
	}
	{
		middlewares := middlewareTable[ProfileService_GetProfile]
		rpcInterceptors := rpcInterceptorTable[ProfileService_GetProfile]
		incomingRPCFactory := func() *apicommon.IncomingRPC {
			var s struct {
				IncomingRPC apicommon.IncomingRPC
				Params      GetProfileParams
				Results     GetProfileResults
			}
			rpcHandler := func(ctx context.Context, rpc *apicommon.RPC) error {
				return service.GetProfile(ctx, rpc.Params().(*GetProfileParams), rpc.Results().(*GetProfileResults))
			}
			s.IncomingRPC.Init(
				"User",
				"Profile",
				"GetProfile",
				&s.Params,
				&s.Results,
				rpcHandler,
				rpcInterceptors,
			)
			return &s.IncomingRPC
		}
		handler := apicommon.MakeHandler(middlewares, incomingRPCFactory, options.TraceIDGenerator)
		serveMux.Handle("/rpc/Profile.GetProfile", handler)
	}
	{
		middlewares := middlewareTable[ProfileService_UpdateProfile]
		rpcInterceptors := rpcInterceptorTable[ProfileService_UpdateProfile]
		incomingRPCFactory := func() *apicommon.IncomingRPC {
			var s struct {
				IncomingRPC apicommon.IncomingRPC
				Params      UpdateProfileParams
			}
			rpcHandler := func(ctx context.Context, rpc *apicommon.RPC) error {
				return service.UpdateProfile(ctx, rpc.Params().(*UpdateProfileParams))
			}
			s.IncomingRPC.Init(
				"User",
				"Profile",
				"UpdateProfile",
				&s.Params,
				nil,
				rpcHandler,
				rpcInterceptors,
			)
			return &s.IncomingRPC
		}
		handler := apicommon.MakeHandler(middlewares, incomingRPCFactory, options.TraceIDGenerator)
		serveMux.Handle("/rpc/Profile.UpdateProfile", handler)
	}
	{
		middlewares := middlewareTable[ProfileService_DeleteProfile]
		rpcInterceptors := rpcInterceptorTable[ProfileService_DeleteProfile]
		incomingRPCFactory := func() *apicommon.IncomingRPC {
			var s struct {
				IncomingRPC apicommon.IncomingRPC
				Params      DeleteProfileParams
			}
			rpcHandler := func(ctx context.Context, rpc *apicommon.RPC) error {
				return service.DeleteProfile(ctx, rpc.Params().(*DeleteProfileParams))
			}
			s.IncomingRPC.Init(
				"User",
				"Profile",
				"DeleteProfile",
				&s.Params,
				nil,
				rpcHandler,
				rpcInterceptors,
			)
			return &s.IncomingRPC
		}
		handler := apicommon.MakeHandler(middlewares, incomingRPCFactory, options.TraceIDGenerator)
		serveMux.Handle("/rpc/Profile.DeleteProfile", handler)
	}
}
