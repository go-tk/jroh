// Code generated by jrohc. DO NOT EDIT.

package userapi

import (
	context "context"
	apicommon "example/api/apicommon"
	http "net/http"
)

type ProfileService interface {
	CreateProfile(ctx context.Context, params *CreateProfileParams, results *CreateProfileResults) (err error)
	GetProfile(ctx context.Context, params *GetProfileParams, results *GetProfileResults) (err error)
	UpdateProfile(ctx context.Context, params *UpdateProfileParams) (err error)
	DeleteProfile(ctx context.Context, params *DeleteProfileParams) (err error)
}

type DummyProfileService struct{}

var _ ProfileService = DummyProfileService{}

func (DummyProfileService) CreateProfile(context.Context, *CreateProfileParams, *CreateProfileResults) error {
	return nil
}
func (DummyProfileService) GetProfile(context.Context, *GetProfileParams, *GetProfileResults) error {
	return nil
}
func (DummyProfileService) UpdateProfile(context.Context, *UpdateProfileParams) error { return nil }
func (DummyProfileService) DeleteProfile(context.Context, *DeleteProfileParams) error { return nil }

func ForEachRPCHandlerOfProfileService(service ProfileService, callback func(
	rpcPath string,
	rpcHandler http.HandlerFunc,
	rpcInfoFactory apicommon.RPCInfoFactory,
) (ok bool)) {
	{
		rpcHandler := func(w http.ResponseWriter, r *http.Request) {
			ctx := r.Context()
			rpcInfo := apicommon.RPCInfoFromContext(ctx)
			var data struct {
				Params  CreateProfileParams
				Error   apicommon.Error
				Results CreateProfileResults
				Resp    CreateProfileResp
			}
			rpcInfo.SetParams(&data.Params)
			rpcInfo.SetError(&data.Error)
			rpcInfo.SetResults(&data.Results)
			defer func() {
				if panicValue := recover(); panicValue != nil {
					apicommon.SavePanicValue(panicValue, rpcInfo)
				}
				data.Resp.ID = rpcInfo.ID()
				if data.Error.Code == 0 {
					rpcInfo.SetError(nil)
					data.Resp.Results = &data.Results
				} else {
					rpcInfo.SetResults(nil)
					data.Resp.Error = &data.Error
				}
				apicommon.WriteResp(&data.Resp, w, rpcInfo)
			}()
			if !apicommon.ReadParams(r.Body, rpcInfo) {
				return
			}
			err := service.CreateProfile(ctx, &data.Params, &data.Results)
			apicommon.SaveErr(err, rpcInfo)
		}
		rpcInfoFactory := func(id string) *apicommon.RPCInfo {
			return apicommon.NewRPCInfo("User", "Profile", "CreateProfile", id)
		}
		if !callback("/rpc/Profile.CreateProfile", rpcHandler, rpcInfoFactory) {
			return
		}
	}
	{
		rpcHandler := func(w http.ResponseWriter, r *http.Request) {
			ctx := r.Context()
			rpcInfo := apicommon.RPCInfoFromContext(ctx)
			var data struct {
				Params  GetProfileParams
				Error   apicommon.Error
				Results GetProfileResults
				Resp    GetProfileResp
			}
			rpcInfo.SetParams(&data.Params)
			rpcInfo.SetError(&data.Error)
			rpcInfo.SetResults(&data.Results)
			defer func() {
				if panicValue := recover(); panicValue != nil {
					apicommon.SavePanicValue(panicValue, rpcInfo)
				}
				data.Resp.ID = rpcInfo.ID()
				if data.Error.Code == 0 {
					rpcInfo.SetError(nil)
					data.Resp.Results = &data.Results
				} else {
					rpcInfo.SetResults(nil)
					data.Resp.Error = &data.Error
				}
				apicommon.WriteResp(&data.Resp, w, rpcInfo)
			}()
			if !apicommon.ReadParams(r.Body, rpcInfo) {
				return
			}
			err := service.GetProfile(ctx, &data.Params, &data.Results)
			apicommon.SaveErr(err, rpcInfo)
		}
		rpcInfoFactory := func(id string) *apicommon.RPCInfo { return apicommon.NewRPCInfo("User", "Profile", "GetProfile", id) }
		if !callback("/rpc/Profile.GetProfile", rpcHandler, rpcInfoFactory) {
			return
		}
	}
	{
		rpcHandler := func(w http.ResponseWriter, r *http.Request) {
			ctx := r.Context()
			rpcInfo := apicommon.RPCInfoFromContext(ctx)
			var data struct {
				Params UpdateProfileParams
				Error  apicommon.Error
				Resp   UpdateProfileResp
			}
			rpcInfo.SetParams(&data.Params)
			rpcInfo.SetError(&data.Error)
			defer func() {
				if panicValue := recover(); panicValue != nil {
					apicommon.SavePanicValue(panicValue, rpcInfo)
				}
				data.Resp.ID = rpcInfo.ID()
				if data.Error.Code == 0 {
					rpcInfo.SetError(nil)
				} else {
					data.Resp.Error = &data.Error
				}
				apicommon.WriteResp(&data.Resp, w, rpcInfo)
			}()
			if !apicommon.ReadParams(r.Body, rpcInfo) {
				return
			}
			err := service.UpdateProfile(ctx, &data.Params)
			apicommon.SaveErr(err, rpcInfo)
		}
		rpcInfoFactory := func(id string) *apicommon.RPCInfo {
			return apicommon.NewRPCInfo("User", "Profile", "UpdateProfile", id)
		}
		if !callback("/rpc/Profile.UpdateProfile", rpcHandler, rpcInfoFactory) {
			return
		}
	}
	{
		rpcHandler := func(w http.ResponseWriter, r *http.Request) {
			ctx := r.Context()
			rpcInfo := apicommon.RPCInfoFromContext(ctx)
			var data struct {
				Params DeleteProfileParams
				Error  apicommon.Error
				Resp   DeleteProfileResp
			}
			rpcInfo.SetParams(&data.Params)
			rpcInfo.SetError(&data.Error)
			defer func() {
				if panicValue := recover(); panicValue != nil {
					apicommon.SavePanicValue(panicValue, rpcInfo)
				}
				data.Resp.ID = rpcInfo.ID()
				if data.Error.Code == 0 {
					rpcInfo.SetError(nil)
				} else {
					data.Resp.Error = &data.Error
				}
				apicommon.WriteResp(&data.Resp, w, rpcInfo)
			}()
			if !apicommon.ReadParams(r.Body, rpcInfo) {
				return
			}
			err := service.DeleteProfile(ctx, &data.Params)
			apicommon.SaveErr(err, rpcInfo)
		}
		rpcInfoFactory := func(id string) *apicommon.RPCInfo {
			return apicommon.NewRPCInfo("User", "Profile", "DeleteProfile", id)
		}
		if !callback("/rpc/Profile.DeleteProfile", rpcHandler, rpcInfoFactory) {
			return
		}
	}
}
