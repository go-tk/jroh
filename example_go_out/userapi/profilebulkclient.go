// Code generated by jrohc. DO NOT EDIT.

package userapi

import (
	context "context"
	apicommon "github.com/go-tk/jroh/go/apicommon"
)

type ProfileBulkClient interface {
	CreateProfilesInBulk(ctx context.Context, params *CreateProfilesInBulkParams) (resp CreateProfilesInBulkResp, err error)
	GetProfilesInBulk(ctx context.Context, params *GetProfilesInBulkParams) (resp GetProfilesInBulkResp, err error)
	UpdateProfilesInBulk(ctx context.Context, params *UpdateProfilesInBulkParams) (resp UpdateProfilesInBulkResp, err error)
	DeleteProfilesInBulk(ctx context.Context, params *DeleteProfilesInBulkParams) (resp DeleteProfilesInBulkResp, err error)
}

type profileBulkClient struct {
	apicommon.Client

	rpcInterceptorTable [4][]apicommon.RPCHandler
}

func NewProfileBulkClient(rpcBaseURL string, options apicommon.ClientOptions) ProfileBulkClient {
	var c profileBulkClient
	c.Init(rpcBaseURL, options)
	apicommon.FillRPCInterceptorTable(c.rpcInterceptorTable[:], options.RPCInterceptors)
	return &c
}

func (c *profileBulkClient) CreateProfilesInBulk(ctx context.Context, params *CreateProfilesInBulkParams) (CreateProfilesInBulkResp, error) {
	var s struct {
		OutgoingRPC apicommon.OutgoingRPC
		Params      CreateProfilesInBulkParams
		Results     CreateProfilesInBulkResults
	}
	s.Params = *params
	rpcInterceptors := c.rpcInterceptorTable[ProfileBulkService_CreateProfilesInBulk]
	s.OutgoingRPC.Init(
		"User",
		"ProfileBulk",
		"CreateProfilesInBulk",
		&s.Params,
		&s.Results,
		apicommon.HandleRPC,
		rpcInterceptors,
	)
	error, err := c.DoRPC(ctx, &s.OutgoingRPC, "/rpc/ProfileBulk.DeleteProfilesInBulk")
	if err != nil {
		return CreateProfilesInBulkResp{}, err
	}
	if error != nil {
		return CreateProfilesInBulkResp{
			TraceID: s.OutgoingRPC.TraceID(),
			Error:   error,
		}, nil
	}
	return CreateProfilesInBulkResp{
		TraceID: s.OutgoingRPC.TraceID(),
		Results: &s.Results,
	}, nil
}

func (c *profileBulkClient) GetProfilesInBulk(ctx context.Context, params *GetProfilesInBulkParams) (GetProfilesInBulkResp, error) {
	var s struct {
		OutgoingRPC apicommon.OutgoingRPC
		Params      GetProfilesInBulkParams
		Results     GetProfilesInBulkResults
	}
	s.Params = *params
	rpcInterceptors := c.rpcInterceptorTable[ProfileBulkService_GetProfilesInBulk]
	s.OutgoingRPC.Init(
		"User",
		"ProfileBulk",
		"GetProfilesInBulk",
		&s.Params,
		&s.Results,
		apicommon.HandleRPC,
		rpcInterceptors,
	)
	error, err := c.DoRPC(ctx, &s.OutgoingRPC, "/rpc/ProfileBulk.DeleteProfilesInBulk")
	if err != nil {
		return GetProfilesInBulkResp{}, err
	}
	if error != nil {
		return GetProfilesInBulkResp{
			TraceID: s.OutgoingRPC.TraceID(),
			Error:   error,
		}, nil
	}
	return GetProfilesInBulkResp{
		TraceID: s.OutgoingRPC.TraceID(),
		Results: &s.Results,
	}, nil
}

func (c *profileBulkClient) UpdateProfilesInBulk(ctx context.Context, params *UpdateProfilesInBulkParams) (UpdateProfilesInBulkResp, error) {
	var s struct {
		OutgoingRPC apicommon.OutgoingRPC
		Params      UpdateProfilesInBulkParams
		Results     UpdateProfilesInBulkResults
	}
	s.Params = *params
	rpcInterceptors := c.rpcInterceptorTable[ProfileBulkService_UpdateProfilesInBulk]
	s.OutgoingRPC.Init(
		"User",
		"ProfileBulk",
		"UpdateProfilesInBulk",
		&s.Params,
		&s.Results,
		apicommon.HandleRPC,
		rpcInterceptors,
	)
	error, err := c.DoRPC(ctx, &s.OutgoingRPC, "/rpc/ProfileBulk.DeleteProfilesInBulk")
	if err != nil {
		return UpdateProfilesInBulkResp{}, err
	}
	if error != nil {
		return UpdateProfilesInBulkResp{
			TraceID: s.OutgoingRPC.TraceID(),
			Error:   error,
		}, nil
	}
	return UpdateProfilesInBulkResp{
		TraceID: s.OutgoingRPC.TraceID(),
		Results: &s.Results,
	}, nil
}

func (c *profileBulkClient) DeleteProfilesInBulk(ctx context.Context, params *DeleteProfilesInBulkParams) (DeleteProfilesInBulkResp, error) {
	var s struct {
		OutgoingRPC apicommon.OutgoingRPC
		Params      DeleteProfilesInBulkParams
		Results     DeleteProfilesInBulkResults
	}
	s.Params = *params
	rpcInterceptors := c.rpcInterceptorTable[ProfileBulkService_DeleteProfilesInBulk]
	s.OutgoingRPC.Init(
		"User",
		"ProfileBulk",
		"DeleteProfilesInBulk",
		&s.Params,
		&s.Results,
		apicommon.HandleRPC,
		rpcInterceptors,
	)
	error, err := c.DoRPC(ctx, &s.OutgoingRPC, "/rpc/ProfileBulk.DeleteProfilesInBulk")
	if err != nil {
		return DeleteProfilesInBulkResp{}, err
	}
	if error != nil {
		return DeleteProfilesInBulkResp{
			TraceID: s.OutgoingRPC.TraceID(),
			Error:   error,
		}, nil
	}
	return DeleteProfilesInBulkResp{
		TraceID: s.OutgoingRPC.TraceID(),
		Results: &s.Results,
	}, nil
}
