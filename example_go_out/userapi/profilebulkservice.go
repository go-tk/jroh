// Code generated by jrohc. DO NOT EDIT.

package userapi

import (
	context "context"
	apicommon "github.com/go-tk/jroh/go/apicommon"
	http "net/http"
)

type ProfileBulkService interface {
	CreateProfilesInBulk(ctx context.Context, params *CreateProfilesInBulkParams, results *CreateProfilesInBulkResults) (err error)
	GetProfilesInBulk(ctx context.Context, params *GetProfilesInBulkParams, results *GetProfilesInBulkResults) (err error)
	UpdateProfilesInBulk(ctx context.Context, params *UpdateProfilesInBulkParams, results *UpdateProfilesInBulkResults) (err error)
	DeleteProfilesInBulk(ctx context.Context, params *DeleteProfilesInBulkParams, results *DeleteProfilesInBulkResults) (err error)
}

type DummyProfileBulkService struct{}

var _ ProfileBulkService = DummyProfileBulkService{}

func (DummyProfileBulkService) CreateProfilesInBulk(context.Context, *CreateProfilesInBulkParams, *CreateProfilesInBulkResults) error {
	return nil
}
func (DummyProfileBulkService) GetProfilesInBulk(context.Context, *GetProfilesInBulkParams, *GetProfilesInBulkResults) error {
	return nil
}
func (DummyProfileBulkService) UpdateProfilesInBulk(context.Context, *UpdateProfilesInBulkParams, *UpdateProfilesInBulkResults) error {
	return nil
}
func (DummyProfileBulkService) DeleteProfilesInBulk(context.Context, *DeleteProfilesInBulkParams, *DeleteProfilesInBulkResults) error {
	return nil
}

func RegisterHandlersOfProfileBulkService(service ProfileBulkService, serveMux *http.ServeMux, options apicommon.RegisterHandlersOptions) {
	options.Sanitize()
	var middlewareTable [4][]apicommon.Middleware
	apicommon.FillMiddlewareTable(middlewareTable[:], options.Middlewares)
	var rpcInterceptorTable [4][]apicommon.RPCHandler
	apicommon.FillRPCInterceptorTable(rpcInterceptorTable[:], options.RPCInterceptors)
	{
		middlewares := middlewareTable[ProfileBulkService_CreateProfilesInBulk]
		rpcInterceptors := rpcInterceptorTable[ProfileBulkService_CreateProfilesInBulk]
		incomingRPCFactory := func() *apicommon.IncomingRPC {
			var s struct {
				IncomingRPC apicommon.IncomingRPC
				Params      CreateProfilesInBulkParams
				Results     CreateProfilesInBulkResults
			}
			rpcHandler := func(ctx context.Context, rpc *apicommon.RPC) error {
				return service.CreateProfilesInBulk(ctx, rpc.Params().(*CreateProfilesInBulkParams), rpc.Results().(*CreateProfilesInBulkResults))
			}
			s.IncomingRPC.Init(
				"User",
				"ProfileBulk",
				"CreateProfilesInBulk",
				&s.Params,
				&s.Results,
				rpcHandler,
				rpcInterceptors,
			)
			return &s.IncomingRPC
		}
		handler := apicommon.MakeHandler(middlewares, incomingRPCFactory, options.TraceIDGenerator)
		serveMux.Handle("/rpc/ProfileBulk.CreateProfilesInBulk", handler)
	}
	{
		middlewares := middlewareTable[ProfileBulkService_GetProfilesInBulk]
		rpcInterceptors := rpcInterceptorTable[ProfileBulkService_GetProfilesInBulk]
		incomingRPCFactory := func() *apicommon.IncomingRPC {
			var s struct {
				IncomingRPC apicommon.IncomingRPC
				Params      GetProfilesInBulkParams
				Results     GetProfilesInBulkResults
			}
			rpcHandler := func(ctx context.Context, rpc *apicommon.RPC) error {
				return service.GetProfilesInBulk(ctx, rpc.Params().(*GetProfilesInBulkParams), rpc.Results().(*GetProfilesInBulkResults))
			}
			s.IncomingRPC.Init(
				"User",
				"ProfileBulk",
				"GetProfilesInBulk",
				&s.Params,
				&s.Results,
				rpcHandler,
				rpcInterceptors,
			)
			return &s.IncomingRPC
		}
		handler := apicommon.MakeHandler(middlewares, incomingRPCFactory, options.TraceIDGenerator)
		serveMux.Handle("/rpc/ProfileBulk.GetProfilesInBulk", handler)
	}
	{
		middlewares := middlewareTable[ProfileBulkService_UpdateProfilesInBulk]
		rpcInterceptors := rpcInterceptorTable[ProfileBulkService_UpdateProfilesInBulk]
		incomingRPCFactory := func() *apicommon.IncomingRPC {
			var s struct {
				IncomingRPC apicommon.IncomingRPC
				Params      UpdateProfilesInBulkParams
				Results     UpdateProfilesInBulkResults
			}
			rpcHandler := func(ctx context.Context, rpc *apicommon.RPC) error {
				return service.UpdateProfilesInBulk(ctx, rpc.Params().(*UpdateProfilesInBulkParams), rpc.Results().(*UpdateProfilesInBulkResults))
			}
			s.IncomingRPC.Init(
				"User",
				"ProfileBulk",
				"UpdateProfilesInBulk",
				&s.Params,
				&s.Results,
				rpcHandler,
				rpcInterceptors,
			)
			return &s.IncomingRPC
		}
		handler := apicommon.MakeHandler(middlewares, incomingRPCFactory, options.TraceIDGenerator)
		serveMux.Handle("/rpc/ProfileBulk.UpdateProfilesInBulk", handler)
	}
	{
		middlewares := middlewareTable[ProfileBulkService_DeleteProfilesInBulk]
		rpcInterceptors := rpcInterceptorTable[ProfileBulkService_DeleteProfilesInBulk]
		incomingRPCFactory := func() *apicommon.IncomingRPC {
			var s struct {
				IncomingRPC apicommon.IncomingRPC
				Params      DeleteProfilesInBulkParams
				Results     DeleteProfilesInBulkResults
			}
			rpcHandler := func(ctx context.Context, rpc *apicommon.RPC) error {
				return service.DeleteProfilesInBulk(ctx, rpc.Params().(*DeleteProfilesInBulkParams), rpc.Results().(*DeleteProfilesInBulkResults))
			}
			s.IncomingRPC.Init(
				"User",
				"ProfileBulk",
				"DeleteProfilesInBulk",
				&s.Params,
				&s.Results,
				rpcHandler,
				rpcInterceptors,
			)
			return &s.IncomingRPC
		}
		handler := apicommon.MakeHandler(middlewares, incomingRPCFactory, options.TraceIDGenerator)
		serveMux.Handle("/rpc/ProfileBulk.DeleteProfilesInBulk", handler)
	}
}
