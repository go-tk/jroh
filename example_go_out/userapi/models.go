// Code generated by jrohc. DO NOT EDIT.

package userapi

import (
	fmt "fmt"
	apicommon "github.com/go-tk/jroh/go/apicommon"
	strconv "strconv"
)

type CreateProfilesInBulkParams struct {
	Profiles []Profile `json:"profiles"`
}

var _ apicommon.Validator = (*CreateProfilesInBulkParams)(nil)

func (m *CreateProfilesInBulkParams) Validate(validationContext *apicommon.ValidationContext) bool {
	validationContext.Enter("profiles")
	if len(m.Profiles) < 1 {
		validationContext.SetErrorDetails("length < 1")
		return false
	}
	for i := range m.Profiles {
		v := &m.Profiles[i]
		validationContext.Enter(strconv.Itoa(i))
		if !v.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	validationContext.Leave()
	return true
}

type CreateProfilesInBulkResp struct {
	TraceID string                       `json:"traceID"`
	Error   *apicommon.Error             `json:"error,omitempty"`
	Results *CreateProfilesInBulkResults `json:"results,omitempty"`
}

type CreateProfilesInBulkResults struct {
	ProfileIDs []ProfileID `json:"profileIDs,omitempty"`
}

var _ apicommon.Validator = (*CreateProfilesInBulkResults)(nil)

func (m *CreateProfilesInBulkResults) Validate(validationContext *apicommon.ValidationContext) bool {
	validationContext.Enter("profileIDs")
	for i := range m.ProfileIDs {
		v := &m.ProfileIDs[i]
		validationContext.Enter(strconv.Itoa(i))
		if !v.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	validationContext.Leave()
	return true
}

type GetProfilesInBulkParams struct {
	ProfileIDs []ProfileID `json:"profileIDs"`
}

var _ apicommon.Validator = (*GetProfilesInBulkParams)(nil)

func (m *GetProfilesInBulkParams) Validate(validationContext *apicommon.ValidationContext) bool {
	validationContext.Enter("profileIDs")
	if len(m.ProfileIDs) < 1 {
		validationContext.SetErrorDetails("length < 1")
		return false
	}
	for i := range m.ProfileIDs {
		v := &m.ProfileIDs[i]
		validationContext.Enter(strconv.Itoa(i))
		if !v.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	validationContext.Leave()
	return true
}

type GetProfilesInBulkResp struct {
	TraceID string                    `json:"traceID"`
	Error   *apicommon.Error          `json:"error,omitempty"`
	Results *GetProfilesInBulkResults `json:"results,omitempty"`
}

type GetProfilesInBulkResults struct {
	Profiles []Profile `json:"profiles,omitempty"`
}

var _ apicommon.Validator = (*GetProfilesInBulkResults)(nil)

func (m *GetProfilesInBulkResults) Validate(validationContext *apicommon.ValidationContext) bool {
	validationContext.Enter("profiles")
	for i := range m.Profiles {
		v := &m.Profiles[i]
		validationContext.Enter(strconv.Itoa(i))
		if !v.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	validationContext.Leave()
	return true
}

type UpdateProfilesInBulkParams struct {
	ProfilePatches []ProfilePatch `json:"profilePatches"`
}

var _ apicommon.Validator = (*UpdateProfilesInBulkParams)(nil)

func (m *UpdateProfilesInBulkParams) Validate(validationContext *apicommon.ValidationContext) bool {
	validationContext.Enter("profilePatches")
	if len(m.ProfilePatches) < 1 {
		validationContext.SetErrorDetails("length < 1")
		return false
	}
	for i := range m.ProfilePatches {
		v := &m.ProfilePatches[i]
		validationContext.Enter(strconv.Itoa(i))
		if !v.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	validationContext.Leave()
	return true
}

type UpdateProfilesInBulkResp struct {
	TraceID string                       `json:"traceID"`
	Error   *apicommon.Error             `json:"error,omitempty"`
	Results *UpdateProfilesInBulkResults `json:"results,omitempty"`
}

type UpdateProfilesInBulkResults struct {
	UpdatedProfileIDs []ProfileID `json:"updatedProfileIDs,omitempty"`
}

var _ apicommon.Validator = (*UpdateProfilesInBulkResults)(nil)

func (m *UpdateProfilesInBulkResults) Validate(validationContext *apicommon.ValidationContext) bool {
	validationContext.Enter("updatedProfileIDs")
	for i := range m.UpdatedProfileIDs {
		v := &m.UpdatedProfileIDs[i]
		validationContext.Enter(strconv.Itoa(i))
		if !v.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	validationContext.Leave()
	return true
}

type DeleteProfilesInBulkParams struct {
	ProfileIDs []ProfileID `json:"profileIDs"`
}

var _ apicommon.Validator = (*DeleteProfilesInBulkParams)(nil)

func (m *DeleteProfilesInBulkParams) Validate(validationContext *apicommon.ValidationContext) bool {
	validationContext.Enter("profileIDs")
	if len(m.ProfileIDs) < 1 {
		validationContext.SetErrorDetails("length < 1")
		return false
	}
	for i := range m.ProfileIDs {
		v := &m.ProfileIDs[i]
		validationContext.Enter(strconv.Itoa(i))
		if !v.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	validationContext.Leave()
	return true
}

type DeleteProfilesInBulkResp struct {
	TraceID string                       `json:"traceID"`
	Error   *apicommon.Error             `json:"error,omitempty"`
	Results *DeleteProfilesInBulkResults `json:"results,omitempty"`
}

type DeleteProfilesInBulkResults struct {
	DeletedProfileIDs []ProfileID `json:"deletedProfileIDs,omitempty"`
}

var _ apicommon.Validator = (*DeleteProfilesInBulkResults)(nil)

func (m *DeleteProfilesInBulkResults) Validate(validationContext *apicommon.ValidationContext) bool {
	validationContext.Enter("deletedProfileIDs")
	for i := range m.DeletedProfileIDs {
		v := &m.DeletedProfileIDs[i]
		validationContext.Enter(strconv.Itoa(i))
		if !v.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	validationContext.Leave()
	return true
}

type CreateProfileParams struct {
	Profile Profile `json:"profile"`
}

var _ apicommon.Validator = (*CreateProfileParams)(nil)

func (m *CreateProfileParams) Validate(validationContext *apicommon.ValidationContext) bool {
	validationContext.Enter("profile")
	if !m.Profile.Validate(validationContext) {
		return false
	}
	validationContext.Leave()
	return true
}

type CreateProfileResp struct {
	TraceID string                `json:"traceID"`
	Error   *apicommon.Error      `json:"error,omitempty"`
	Results *CreateProfileResults `json:"results,omitempty"`
}

type CreateProfileResults struct {
	ProfileID ProfileID `json:"profileID"`
}

var _ apicommon.Validator = (*CreateProfileResults)(nil)

func (m *CreateProfileResults) Validate(validationContext *apicommon.ValidationContext) bool {
	validationContext.Enter("profileID")
	if !m.ProfileID.Validate(validationContext) {
		return false
	}
	validationContext.Leave()
	return true
}

type GetProfileParams struct {
	ProfileID ProfileID `json:"profileID"`
}

var _ apicommon.Validator = (*GetProfileParams)(nil)

func (m *GetProfileParams) Validate(validationContext *apicommon.ValidationContext) bool {
	validationContext.Enter("profileID")
	if !m.ProfileID.Validate(validationContext) {
		return false
	}
	validationContext.Leave()
	return true
}

type GetProfileResp struct {
	TraceID string             `json:"traceID"`
	Error   *apicommon.Error   `json:"error,omitempty"`
	Results *GetProfileResults `json:"results,omitempty"`
}

type GetProfileResults struct {
	Profile Profile `json:"profile"`
}

var _ apicommon.Validator = (*GetProfileResults)(nil)

func (m *GetProfileResults) Validate(validationContext *apicommon.ValidationContext) bool {
	validationContext.Enter("profile")
	if !m.Profile.Validate(validationContext) {
		return false
	}
	validationContext.Leave()
	return true
}

type UpdateProfileParams struct {
	ProfilePatch ProfilePatch `json:"profilePatch"`
}

var _ apicommon.Validator = (*UpdateProfileParams)(nil)

func (m *UpdateProfileParams) Validate(validationContext *apicommon.ValidationContext) bool {
	validationContext.Enter("profilePatch")
	if !m.ProfilePatch.Validate(validationContext) {
		return false
	}
	validationContext.Leave()
	return true
}

type UpdateProfileResp struct {
	TraceID string           `json:"traceID"`
	Error   *apicommon.Error `json:"error,omitempty"`
}

type DeleteProfileParams struct {
	ProfileID ProfileID `json:"profileID"`
}

var _ apicommon.Validator = (*DeleteProfileParams)(nil)

func (m *DeleteProfileParams) Validate(validationContext *apicommon.ValidationContext) bool {
	validationContext.Enter("profileID")
	if !m.ProfileID.Validate(validationContext) {
		return false
	}
	validationContext.Leave()
	return true
}

type DeleteProfileResp struct {
	TraceID string           `json:"traceID"`
	Error   *apicommon.Error `json:"error,omitempty"`
}

type Profile struct {
	ID         ProfileID  `json:"id"`
	Nickname   Nickname   `json:"nickname"`
	GenderType GenderType `json:"genderType"`
	Weight     *Weight    `json:"weight,omitempty"`
	Height     *Height    `json:"height,omitempty"`
}

var _ apicommon.Validator = (*Profile)(nil)

func (m *Profile) Validate(validationContext *apicommon.ValidationContext) bool {
	validationContext.Enter("id")
	if !m.ID.Validate(validationContext) {
		return false
	}
	validationContext.Leave()
	validationContext.Enter("nickname")
	if !m.Nickname.Validate(validationContext) {
		return false
	}
	validationContext.Leave()
	validationContext.Enter("genderType")
	if !m.GenderType.Validate(validationContext) {
		return false
	}
	validationContext.Leave()
	if m.Weight != nil {
		validationContext.Enter("weight")
		if !m.Weight.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.Height != nil {
		validationContext.Enter("height")
		if !m.Height.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	return true
}

type ProfilePatch struct {
	ID         ProfileID   `json:"id"`
	Nickname   *Nickname   `json:"nickname,omitempty"`
	GenderType *GenderType `json:"genderType,omitempty"`
	Weight     *Weight     `json:"weight,omitempty"`
	Height     *Height     `json:"height,omitempty"`
}

var _ apicommon.Validator = (*ProfilePatch)(nil)

func (m *ProfilePatch) Validate(validationContext *apicommon.ValidationContext) bool {
	validationContext.Enter("id")
	if !m.ID.Validate(validationContext) {
		return false
	}
	validationContext.Leave()
	if m.Nickname != nil {
		validationContext.Enter("nickname")
		if !m.Nickname.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.GenderType != nil {
		validationContext.Enter("genderType")
		if !m.GenderType.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.Weight != nil {
		validationContext.Enter("weight")
		if !m.Weight.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.Height != nil {
		validationContext.Enter("height")
		if !m.Height.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	return true
}

type ProfileID int64

var _ apicommon.Validator = ProfileID(0)

func (m ProfileID) Validate(validationContext *apicommon.ValidationContext) bool {
	if m < 1 {
		validationContext.SetErrorDetails("value < 1")
		return false
	}
	return true
}

type Nickname string

var _ apicommon.Validator = Nickname("")

func (m Nickname) Validate(validationContext *apicommon.ValidationContext) bool {
	if len(m) < 1 {
		validationContext.SetErrorDetails("length < 1")
		return false
	}
	if len(m) > 50 {
		validationContext.SetErrorDetails("length > 50")
		return false
	}
	return true
}

type GenderType int32

const (
	GenderFemale GenderType = 1
	GenderMale   GenderType = 2
	GenderOther  GenderType = 3
)

var _ fmt.Stringer = GenderType(0)

func (m GenderType) String() string {
	switch m {
	case GenderFemale:
		return "GenderFemale"
	case GenderMale:
		return "GenderMale"
	case GenderOther:
		return "GenderOther"
	default:
		return "GenderType(" + strconv.FormatInt(int64(m), 10) + ")"
	}
}

var _ apicommon.Validator = GenderType(0)

func (m GenderType) Validate(validationContext *apicommon.ValidationContext) bool {
	switch m {
	case GenderFemale:
		return true
	case GenderMale:
		return true
	case GenderOther:
		return true
	default:
		validationContext.SetErrorDetails("invalid GenderType")
		return false
	}
}

type Weight float64

var _ apicommon.Validator = Weight(0)

func (m Weight) Validate(validationContext *apicommon.ValidationContext) bool {
	if m <= 0 {
		validationContext.SetErrorDetails("value <= 0")
		return false
	}
	return true
}

type Height int32

var _ apicommon.Validator = Height(0)

func (m Height) Validate(validationContext *apicommon.ValidationContext) bool {
	if m < 1 {
		validationContext.SetErrorDetails("value < 1")
		return false
	}
	return true
}
