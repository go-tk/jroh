// Code generated by jrohc. DO NOT EDIT.

package barapi

import (
	context "context"
	fmt "fmt"
	apicommon "github.com/go-tk/jroh/go/apicommon"
	http "net/http"
)

type TestClient interface {
	DoSomething(ctx context.Context) (results *DoSomethingResults, err error)
}

type testClient struct {
	apicommon.Client

	rpcFiltersTable [1][]apicommon.RPCHandler
	transportTable  [1]http.RoundTripper
}

func NewTestClient(rpcBaseURL string, options apicommon.ClientOptions) TestClient {
	options.Sanitize()
	var c testClient
	c.Init(options.Timeout, rpcBaseURL)
	apicommon.FillRPCFiltersTable(c.rpcFiltersTable[:], options.RPCFilters)
	apicommon.FillTransportTable(c.transportTable[:], options.Transport, options.Middlewares)
	return &c
}

func (c *testClient) DoSomething(ctx context.Context) (*DoSomethingResults, error) {
	var s struct {
		OutgoingRPC apicommon.OutgoingRPC
		Results     DoSomethingResults
	}
	rpcFilters := c.rpcFiltersTable[Test_DoSomething]
	s.OutgoingRPC.Init("Bar", "Test", "DoSomething", "Bar.Test.DoSomething", Test_DoSomething, nil, &s.Results, rpcFilters)
	transport := c.transportTable[Test_DoSomething]
	if err := c.DoRPC(ctx, &s.OutgoingRPC, transport, "/rpc/Bar.Test.DoSomething"); err != nil {
		return nil, fmt.Errorf("rpc failed; fullMethodName=\"Bar.Test.DoSomething\" traceID=%q: %w",
			s.OutgoingRPC.TraceID(), err)
	}
	return &s.Results, nil
}

type TestClientFuncs struct {
	DoSomethingFunc func(context.Context) (*DoSomethingResults, error)
}

var _ TestClient = (*TestClientFuncs)(nil)

func (cf *TestClientFuncs) DoSomething(ctx context.Context) (*DoSomethingResults, error) {
	if f := cf.DoSomethingFunc; f != nil {
		return f(ctx)
	}
	return nil, apicommon.ErrNotImplemented
}
