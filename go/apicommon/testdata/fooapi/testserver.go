// Code generated by jrohc. DO NOT EDIT.

package fooapi

import (
	context "context"
	apicommon "github.com/go-tk/jroh/go/apicommon"
	http "net/http"
)

type TestServer interface {
	DoSomething(ctx context.Context) (err error)
	DoSomething1(ctx context.Context, params *DoSomething1Params) (err error)
	DoSomething2(ctx context.Context, results *DoSomething2Results) (err error)
	DoSomething3(ctx context.Context, params *DoSomething3Params, results *DoSomething3Results) (err error)
}

func RegisterTestServer(s TestServer, router *apicommon.Router, options apicommon.ServerOptions) {
	options.Sanitize()
	var rpcFiltersTable [NumberOfTestMethods][]apicommon.IncomingRPCHandler
	apicommon.FillIncomingRPCFiltersTable(rpcFiltersTable[:], options.RPCFilters)
	{
		rpcFilters := rpcFiltersTable[Test_DoSomething]
		handler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			var a struct {
				rpc     apicommon.IncomingRPC
				params  apicommon.DummyModel
				results apicommon.DummyModel
			}
			a.rpc.Namespace = "Foo"
			a.rpc.ServiceName = "Test"
			a.rpc.MethodName = "DoSomething"
			a.rpc.FullMethodName = "Foo.Test.DoSomething"
			a.rpc.MethodIndex = Test_DoSomething
			a.rpc.Params = &a.params
			a.rpc.Results = &a.results
			a.rpc.SetHandler(func(ctx context.Context, rpc *apicommon.IncomingRPC) error {
				return s.DoSomething(ctx)
			})
			a.rpc.SetFilters(rpcFilters)
			apicommon.HandleRequest(r, &a.rpc, options.TraceIDGenerator, w)
		})
		router.AddRoute("/rpc/Foo.Test.DoSomething", handler, "Foo.Test.DoSomething", rpcFilters)
	}
	{
		rpcFilters := rpcFiltersTable[Test_DoSomething1]
		handler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			var a struct {
				rpc     apicommon.IncomingRPC
				params  DoSomething1Params
				results apicommon.DummyModel
			}
			a.rpc.Namespace = "Foo"
			a.rpc.ServiceName = "Test"
			a.rpc.MethodName = "DoSomething1"
			a.rpc.FullMethodName = "Foo.Test.DoSomething1"
			a.rpc.MethodIndex = Test_DoSomething1
			a.rpc.Params = &a.params
			a.rpc.Results = &a.results
			a.rpc.SetHandler(func(ctx context.Context, rpc *apicommon.IncomingRPC) error {
				return s.DoSomething1(ctx, rpc.Params.(*DoSomething1Params))
			})
			a.rpc.SetFilters(rpcFilters)
			apicommon.HandleRequest(r, &a.rpc, options.TraceIDGenerator, w)
		})
		router.AddRoute("/rpc/Foo.Test.DoSomething1", handler, "Foo.Test.DoSomething1", rpcFilters)
	}
	{
		rpcFilters := rpcFiltersTable[Test_DoSomething2]
		handler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			var a struct {
				rpc     apicommon.IncomingRPC
				params  apicommon.DummyModel
				results DoSomething2Results
			}
			a.rpc.Namespace = "Foo"
			a.rpc.ServiceName = "Test"
			a.rpc.MethodName = "DoSomething2"
			a.rpc.FullMethodName = "Foo.Test.DoSomething2"
			a.rpc.MethodIndex = Test_DoSomething2
			a.rpc.Params = &a.params
			a.rpc.Results = &a.results
			a.rpc.SetHandler(func(ctx context.Context, rpc *apicommon.IncomingRPC) error {
				return s.DoSomething2(ctx, rpc.Results.(*DoSomething2Results))
			})
			a.rpc.SetFilters(rpcFilters)
			apicommon.HandleRequest(r, &a.rpc, options.TraceIDGenerator, w)
		})
		router.AddRoute("/rpc/Foo.Test.DoSomething2", handler, "Foo.Test.DoSomething2", rpcFilters)
	}
	{
		rpcFilters := rpcFiltersTable[Test_DoSomething3]
		handler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			var a struct {
				rpc     apicommon.IncomingRPC
				params  DoSomething3Params
				results DoSomething3Results
			}
			a.rpc.Namespace = "Foo"
			a.rpc.ServiceName = "Test"
			a.rpc.MethodName = "DoSomething3"
			a.rpc.FullMethodName = "Foo.Test.DoSomething3"
			a.rpc.MethodIndex = Test_DoSomething3
			a.rpc.Params = &a.params
			a.rpc.Results = &a.results
			a.rpc.SetHandler(func(ctx context.Context, rpc *apicommon.IncomingRPC) error {
				return s.DoSomething3(ctx, rpc.Params.(*DoSomething3Params), rpc.Results.(*DoSomething3Results))
			})
			a.rpc.SetFilters(rpcFilters)
			apicommon.HandleRequest(r, &a.rpc, options.TraceIDGenerator, w)
		})
		router.AddRoute("/rpc/Foo.Test.DoSomething3", handler, "Foo.Test.DoSomething3", rpcFilters)
	}
}

type TestServerFuncs struct {
	DoSomethingFunc  func(context.Context) error
	DoSomething1Func func(context.Context, *DoSomething1Params) error
	DoSomething2Func func(context.Context, *DoSomething2Results) error
	DoSomething3Func func(context.Context, *DoSomething3Params, *DoSomething3Results) error
}

var _ TestServer = (*TestServerFuncs)(nil)

func (sf *TestServerFuncs) DoSomething(ctx context.Context) error {
	if f := sf.DoSomethingFunc; f != nil {
		return f(ctx)
	}
	return apicommon.NewNotImplementedError()
}

func (sf *TestServerFuncs) DoSomething1(ctx context.Context, params *DoSomething1Params) error {
	if f := sf.DoSomething1Func; f != nil {
		return f(ctx, params)
	}
	return apicommon.NewNotImplementedError()
}

func (sf *TestServerFuncs) DoSomething2(ctx context.Context, results *DoSomething2Results) error {
	if f := sf.DoSomething2Func; f != nil {
		return f(ctx, results)
	}
	return apicommon.NewNotImplementedError()
}

func (sf *TestServerFuncs) DoSomething3(ctx context.Context, params *DoSomething3Params, results *DoSomething3Results) error {
	if f := sf.DoSomething3Func; f != nil {
		return f(ctx, params, results)
	}
	return apicommon.NewNotImplementedError()
}
