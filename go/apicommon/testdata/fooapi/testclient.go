// Code generated by jrohc. DO NOT EDIT.

package fooapi

import (
	context "context"
	apicommon "github.com/go-tk/jroh/go/apicommon"
	http "net/http"
)

type TestClient interface {
	DoSomething(ctx context.Context, params *DoSomethingParams) (err error)
	DoSomething2(ctx context.Context, params *DoSomething2Params) (results *DoSomething2Results, err error)
	DoSomething3(ctx context.Context) (err error)
}

type testClient struct {
	apicommon.Client

	rpcFiltersTable [3][]apicommon.RPCHandler
	transportTable  [3]http.RoundTripper
}

func NewTestClient(rpcBaseURL string, options apicommon.ClientOptions) TestClient {
	options.Sanitize()
	var c testClient
	c.Init(rpcBaseURL, options.Timeout)
	apicommon.FillRPCFiltersTable(c.rpcFiltersTable[:], options.RPCFilters)
	apicommon.FillTransportTable(c.transportTable[:], options.Transport, options.Middlewares)
	return &c
}

func (c *testClient) DoSomething(ctx context.Context, params *DoSomethingParams) error {
	var s struct {
		OutgoingRPC apicommon.OutgoingRPC
		Params      DoSomethingParams
	}
	s.Params = *params
	rpcFilters := c.rpcFiltersTable[Test_DoSomething]
	s.OutgoingRPC.Init("Foo", "Test", "DoSomething", &s.Params, nil, apicommon.HandleRPC, rpcFilters)
	transport := c.transportTable[Test_DoSomething]
	return c.DoRPC(ctx, &s.OutgoingRPC, transport, "/rpc/Foo.Test.DoSomething")
}

func (c *testClient) DoSomething2(ctx context.Context, params *DoSomething2Params) (*DoSomething2Results, error) {
	var s struct {
		OutgoingRPC apicommon.OutgoingRPC
		Params      DoSomething2Params
		Results     DoSomething2Results
	}
	s.Params = *params
	rpcFilters := c.rpcFiltersTable[Test_DoSomething2]
	s.OutgoingRPC.Init("Foo", "Test", "DoSomething2", &s.Params, &s.Results, apicommon.HandleRPC, rpcFilters)
	transport := c.transportTable[Test_DoSomething2]
	if err := c.DoRPC(ctx, &s.OutgoingRPC, transport, "/rpc/Foo.Test.DoSomething2"); err != nil {
		return nil, err
	}
	return &s.Results, nil
}

func (c *testClient) DoSomething3(ctx context.Context) error {
	var s struct {
		OutgoingRPC apicommon.OutgoingRPC
	}
	rpcFilters := c.rpcFiltersTable[Test_DoSomething3]
	s.OutgoingRPC.Init("Foo", "Test", "DoSomething3", nil, nil, apicommon.HandleRPC, rpcFilters)
	transport := c.transportTable[Test_DoSomething3]
	return c.DoRPC(ctx, &s.OutgoingRPC, transport, "/rpc/Foo.Test.DoSomething3")
}

type TestClientFuncs struct {
	DoSomethingFunc  func(context.Context, *DoSomethingParams) error
	DoSomething2Func func(context.Context, *DoSomething2Params) (*DoSomething2Results, error)
	DoSomething3Func func(context.Context) error
}

var _ TestClient = (*TestClientFuncs)(nil)

func (cf *TestClientFuncs) DoSomething(ctx context.Context, params *DoSomethingParams) error {
	if f := cf.DoSomethingFunc; f != nil {
		return f(ctx, params)
	}
	return apicommon.ErrNotImplemented
}

func (cf *TestClientFuncs) DoSomething2(ctx context.Context, params *DoSomething2Params) (*DoSomething2Results, error) {
	if f := cf.DoSomething2Func; f != nil {
		return f(ctx, params)
	}
	return nil, apicommon.ErrNotImplemented
}

func (cf *TestClientFuncs) DoSomething3(ctx context.Context) error {
	if f := cf.DoSomething3Func; f != nil {
		return f(ctx)
	}
	return apicommon.ErrNotImplemented
}
