// Code generated by jrohc. DO NOT EDIT.

package fooapi

import (
	fmt "fmt"
	apicommon "github.com/go-tk/jroh/go/apicommon"
	regexp "regexp"
	strconv "strconv"
)

type DoSomething1Params struct {
	MyStructInt32   *MyStructInt32   `json:"myStructInt32,omitempty"`
	MyStructInt64   *MyStructInt64   `json:"myStructInt64,omitempty"`
	MyStructFloat32 *MyStructFloat32 `json:"myStructFloat32,omitempty"`
	MyStructFloat64 *MyStructFloat64 `json:"myStructFloat64,omitempty"`
	MyStructString  *MyStructString  `json:"myStructString,omitempty"`
	MyOnOff         bool             `json:"myOnOff"`
}

var _ apicommon.Model = (*DoSomething1Params)(nil)

func (m *DoSomething1Params) Validate(validationContext *apicommon.ValidationContext) bool {
	if m.MyStructInt32 != nil {
		validationContext.Enter("myStructInt32")
		if !m.MyStructInt32.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.MyStructInt64 != nil {
		validationContext.Enter("myStructInt64")
		if !m.MyStructInt64.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.MyStructFloat32 != nil {
		validationContext.Enter("myStructFloat32")
		if !m.MyStructFloat32.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.MyStructFloat64 != nil {
		validationContext.Enter("myStructFloat64")
		if !m.MyStructFloat64.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.MyStructString != nil {
		validationContext.Enter("myStructString")
		if !m.MyStructString.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	mm := struct {
		apicommon.DummyFurtherValidator
		*DoSomething1Params
	}{DoSomething1Params: m}
	return mm.FurtherValidate(validationContext)
}

type DoSomething2Results struct {
	MyStructInt32   *MyStructInt32   `json:"myStructInt32,omitempty"`
	MyStructInt64   *MyStructInt64   `json:"myStructInt64,omitempty"`
	MyStructFloat32 *MyStructFloat32 `json:"myStructFloat32,omitempty"`
	MyStructFloat64 *MyStructFloat64 `json:"myStructFloat64,omitempty"`
	MyStructString  *MyStructString  `json:"myStructString,omitempty"`
	MyOnOff         bool             `json:"myOnOff"`
}

var _ apicommon.Model = (*DoSomething2Results)(nil)

func (m *DoSomething2Results) Validate(validationContext *apicommon.ValidationContext) bool {
	if m.MyStructInt32 != nil {
		validationContext.Enter("myStructInt32")
		if !m.MyStructInt32.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.MyStructInt64 != nil {
		validationContext.Enter("myStructInt64")
		if !m.MyStructInt64.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.MyStructFloat32 != nil {
		validationContext.Enter("myStructFloat32")
		if !m.MyStructFloat32.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.MyStructFloat64 != nil {
		validationContext.Enter("myStructFloat64")
		if !m.MyStructFloat64.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.MyStructString != nil {
		validationContext.Enter("myStructString")
		if !m.MyStructString.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	mm := struct {
		apicommon.DummyFurtherValidator
		*DoSomething2Results
	}{DoSomething2Results: m}
	return mm.FurtherValidate(validationContext)
}

type DoSomething3Params struct {
	MyStructInt32   *MyStructInt32   `json:"myStructInt32,omitempty"`
	MyStructInt64   *MyStructInt64   `json:"myStructInt64,omitempty"`
	MyStructFloat32 *MyStructFloat32 `json:"myStructFloat32,omitempty"`
	MyStructFloat64 *MyStructFloat64 `json:"myStructFloat64,omitempty"`
	MyStructString  *MyStructString  `json:"myStructString,omitempty"`
	MyOnOff         bool             `json:"myOnOff"`
}

var _ apicommon.Model = (*DoSomething3Params)(nil)

func (m *DoSomething3Params) Validate(validationContext *apicommon.ValidationContext) bool {
	if m.MyStructInt32 != nil {
		validationContext.Enter("myStructInt32")
		if !m.MyStructInt32.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.MyStructInt64 != nil {
		validationContext.Enter("myStructInt64")
		if !m.MyStructInt64.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.MyStructFloat32 != nil {
		validationContext.Enter("myStructFloat32")
		if !m.MyStructFloat32.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.MyStructFloat64 != nil {
		validationContext.Enter("myStructFloat64")
		if !m.MyStructFloat64.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.MyStructString != nil {
		validationContext.Enter("myStructString")
		if !m.MyStructString.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	mm := struct {
		apicommon.DummyFurtherValidator
		*DoSomething3Params
	}{DoSomething3Params: m}
	return mm.FurtherValidate(validationContext)
}

type DoSomething3Results struct {
	MyStructInt32   *MyStructInt32   `json:"myStructInt32,omitempty"`
	MyStructInt64   *MyStructInt64   `json:"myStructInt64,omitempty"`
	MyStructFloat32 *MyStructFloat32 `json:"myStructFloat32,omitempty"`
	MyStructFloat64 *MyStructFloat64 `json:"myStructFloat64,omitempty"`
	MyStructString  *MyStructString  `json:"myStructString,omitempty"`
	MyOnOff         bool             `json:"myOnOff"`
}

var _ apicommon.Model = (*DoSomething3Results)(nil)

func (m *DoSomething3Results) Validate(validationContext *apicommon.ValidationContext) bool {
	if m.MyStructInt32 != nil {
		validationContext.Enter("myStructInt32")
		if !m.MyStructInt32.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.MyStructInt64 != nil {
		validationContext.Enter("myStructInt64")
		if !m.MyStructInt64.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.MyStructFloat32 != nil {
		validationContext.Enter("myStructFloat32")
		if !m.MyStructFloat32.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.MyStructFloat64 != nil {
		validationContext.Enter("myStructFloat64")
		if !m.MyStructFloat64.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.MyStructString != nil {
		validationContext.Enter("myStructString")
		if !m.MyStructString.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	mm := struct {
		apicommon.DummyFurtherValidator
		*DoSomething3Results
	}{DoSomething3Results: m}
	return mm.FurtherValidate(validationContext)
}

type MyStructInt32 struct {
	TheInt32A                        int32           `json:"theInt32A"`
	TheOptionalInt32A                *int32          `json:"theOptionalInt32A,omitempty"`
	TheRepeatedInt32A                []int32         `json:"theRepeatedInt32A,omitempty"`
	TheCountLimitedRepeatedInt32A    []int32         `json:"theCountLimitedRepeatedInt32A"`
	TheInt32B                        Int32           `json:"theInt32B"`
	TheOptionalInt32B                *Int32          `json:"theOptionalInt32B,omitempty"`
	TheRepeatedInt32B                []Int32         `json:"theRepeatedInt32B,omitempty"`
	TheCountLimitedRepeatedInt32B    []Int32         `json:"theCountLimitedRepeatedInt32B"`
	TheXInt32A                       int32           `json:"theXInt32A"`
	TheOptionalXInt32A               *int32          `json:"theOptionalXInt32A,omitempty"`
	TheRepeatedXInt32A               []int32         `json:"theRepeatedXInt32A,omitempty"`
	TheCountLimitedRepeatedXInt32A   []int32         `json:"theCountLimitedRepeatedXInt32A"`
	TheXInt32B                       XInt32          `json:"theXInt32B"`
	TheOptionalXInt32B               *XInt32         `json:"theOptionalXInt32B,omitempty"`
	TheRepeatedXInt32B               []XInt32        `json:"theRepeatedXInt32B,omitempty"`
	TheCountLimitedRepeatedXInt32B   []XInt32        `json:"theCountLimitedRepeatedXInt32B"`
	TheEnumInt32                     EnumInt32       `json:"theEnumInt32"`
	TheOptionalEnumInt32             *EnumInt32      `json:"theOptionalEnumInt32,omitempty"`
	TheRepeatedEnumInt32             []EnumInt32     `json:"theRepeatedEnumInt32,omitempty"`
	TheCountLimitedRepeatedEnumInt32 []EnumInt32     `json:"theCountLimitedRepeatedEnumInt32"`
	Other                            *MyStructInt32  `json:"other,omitempty"`
	Others                           []MyStructInt32 `json:"others,omitempty"`
	CountLimitedOthers               []MyStructInt32 `json:"countLimitedOthers,omitempty"`
}

var _ apicommon.Model = (*MyStructInt32)(nil)

func (m *MyStructInt32) Validate(validationContext *apicommon.ValidationContext) bool {
	{
		validationContext.Enter("theCountLimitedRepeatedInt32A")
		if len(m.TheCountLimitedRepeatedInt32A) < 3 {
			validationContext.SetErrorDetails("length < 3")
			return false
		}
		if len(m.TheCountLimitedRepeatedInt32A) > 5 {
			validationContext.SetErrorDetails("length > 5")
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theInt32B")
		if !m.TheInt32B.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.TheOptionalInt32B != nil {
		validationContext.Enter("theOptionalInt32B")
		if !m.TheOptionalInt32B.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theRepeatedInt32B")
		for i := range m.TheRepeatedInt32B {
			v := &m.TheRepeatedInt32B[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theCountLimitedRepeatedInt32B")
		if len(m.TheCountLimitedRepeatedInt32B) < 3 {
			validationContext.SetErrorDetails("length < 3")
			return false
		}
		if len(m.TheCountLimitedRepeatedInt32B) > 5 {
			validationContext.SetErrorDetails("length > 5")
			return false
		}
		for i := range m.TheCountLimitedRepeatedInt32B {
			v := &m.TheCountLimitedRepeatedInt32B[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theXInt32A")
		if m.TheXInt32A < 100 {
			validationContext.SetErrorDetails("value < 100")
			return false
		}
		if m.TheXInt32A > 999 {
			validationContext.SetErrorDetails("value > 999")
			return false
		}
		validationContext.Leave()
	}
	if m.TheOptionalXInt32A != nil {
		v := *m.TheOptionalXInt32A
		validationContext.Enter("theOptionalXInt32A")
		if v < 100 {
			validationContext.SetErrorDetails("value < 100")
			return false
		}
		if v > 999 {
			validationContext.SetErrorDetails("value > 999")
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theRepeatedXInt32A")
		for i, v := range m.TheRepeatedXInt32A {
			validationContext.Enter(strconv.Itoa(i))
			if v < 100 {
				validationContext.SetErrorDetails("value < 100")
				return false
			}
			if v > 999 {
				validationContext.SetErrorDetails("value > 999")
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theCountLimitedRepeatedXInt32A")
		if len(m.TheCountLimitedRepeatedXInt32A) < 3 {
			validationContext.SetErrorDetails("length < 3")
			return false
		}
		if len(m.TheCountLimitedRepeatedXInt32A) > 5 {
			validationContext.SetErrorDetails("length > 5")
			return false
		}
		for i, v := range m.TheCountLimitedRepeatedXInt32A {
			validationContext.Enter(strconv.Itoa(i))
			if v < 100 {
				validationContext.SetErrorDetails("value < 100")
				return false
			}
			if v > 999 {
				validationContext.SetErrorDetails("value > 999")
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theXInt32B")
		if !m.TheXInt32B.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.TheOptionalXInt32B != nil {
		validationContext.Enter("theOptionalXInt32B")
		if !m.TheOptionalXInt32B.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theRepeatedXInt32B")
		for i := range m.TheRepeatedXInt32B {
			v := &m.TheRepeatedXInt32B[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theCountLimitedRepeatedXInt32B")
		if len(m.TheCountLimitedRepeatedXInt32B) < 3 {
			validationContext.SetErrorDetails("length < 3")
			return false
		}
		if len(m.TheCountLimitedRepeatedXInt32B) > 5 {
			validationContext.SetErrorDetails("length > 5")
			return false
		}
		for i := range m.TheCountLimitedRepeatedXInt32B {
			v := &m.TheCountLimitedRepeatedXInt32B[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theEnumInt32")
		if !m.TheEnumInt32.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.TheOptionalEnumInt32 != nil {
		validationContext.Enter("theOptionalEnumInt32")
		if !m.TheOptionalEnumInt32.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theRepeatedEnumInt32")
		for i := range m.TheRepeatedEnumInt32 {
			v := &m.TheRepeatedEnumInt32[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theCountLimitedRepeatedEnumInt32")
		if len(m.TheCountLimitedRepeatedEnumInt32) < 3 {
			validationContext.SetErrorDetails("length < 3")
			return false
		}
		if len(m.TheCountLimitedRepeatedEnumInt32) > 5 {
			validationContext.SetErrorDetails("length > 5")
			return false
		}
		for i := range m.TheCountLimitedRepeatedEnumInt32 {
			v := &m.TheCountLimitedRepeatedEnumInt32[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	if m.Other != nil {
		validationContext.Enter("other")
		if !m.Other.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("others")
		for i := range m.Others {
			v := &m.Others[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("countLimitedOthers")
		if len(m.CountLimitedOthers) > 3 {
			validationContext.SetErrorDetails("length > 3")
			return false
		}
		for i := range m.CountLimitedOthers {
			v := &m.CountLimitedOthers[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	mm := struct {
		apicommon.DummyFurtherValidator
		*MyStructInt32
	}{MyStructInt32: m}
	return mm.FurtherValidate(validationContext)
}

type MyStructFloat32 struct {
	TheFloat32A                            float32           `json:"theFloat32A"`
	TheOptionalFloat32A                    *float32          `json:"theOptionalFloat32A,omitempty"`
	TheRepeatedFloat32A                    []float32         `json:"theRepeatedFloat32A,omitempty"`
	TheCountLimitedRepeatedFloat32A        []float32         `json:"theCountLimitedRepeatedFloat32A"`
	TheFloat32B                            Float32           `json:"theFloat32B"`
	TheOptionalFloat32B                    *Float32          `json:"theOptionalFloat32B,omitempty"`
	TheRepeatedFloat32B                    []Float32         `json:"theRepeatedFloat32B,omitempty"`
	TheCountLimitedRepeatedFloat32B        []Float32         `json:"theCountLimitedRepeatedFloat32B"`
	TheXClosedFloat32A                     float32           `json:"theXClosedFloat32A"`
	TheOptionalXClosedFloat32A             *float32          `json:"theOptionalXClosedFloat32A,omitempty"`
	TheRepeatedXClosedFloat32A             []float32         `json:"theRepeatedXClosedFloat32A,omitempty"`
	TheCountLimitedRepeatedXClosedFloat32A []float32         `json:"theCountLimitedRepeatedXClosedFloat32A"`
	TheXClosedFloat32B                     XClosedFloat32    `json:"theXClosedFloat32B"`
	TheOptionalXClosedFloat32B             *XClosedFloat32   `json:"theOptionalXClosedFloat32B,omitempty"`
	TheRepeatedXClosedFloat32B             []XClosedFloat32  `json:"theRepeatedXClosedFloat32B,omitempty"`
	TheCountLimitedRepeatedXClosedFloat32B []XClosedFloat32  `json:"theCountLimitedRepeatedXClosedFloat32B"`
	TheXOpenFloat32A                       float32           `json:"theXOpenFloat32A"`
	TheOptionalXOpenFloat32A               *float32          `json:"theOptionalXOpenFloat32A,omitempty"`
	TheRepeatedXOpenFloat32A               []float32         `json:"theRepeatedXOpenFloat32A,omitempty"`
	TheCountLimitedRepeatedXOpenFloat32A   []float32         `json:"theCountLimitedRepeatedXOpenFloat32A"`
	TheXOpenFloat32B                       XOpenFloat32      `json:"theXOpenFloat32B"`
	TheOptionalXOpenFloat32B               *XOpenFloat32     `json:"theOptionalXOpenFloat32B,omitempty"`
	TheRepeatedXOpenFloat32B               []XOpenFloat32    `json:"theRepeatedXOpenFloat32B,omitempty"`
	TheCountLimitedRepeatedXOpenFloat32B   []XOpenFloat32    `json:"theCountLimitedRepeatedXOpenFloat32B"`
	Other                                  *MyStructFloat32  `json:"other,omitempty"`
	Others                                 []MyStructFloat32 `json:"others,omitempty"`
	CountLimitedOthers                     []MyStructFloat32 `json:"countLimitedOthers,omitempty"`
}

var _ apicommon.Model = (*MyStructFloat32)(nil)

func (m *MyStructFloat32) Validate(validationContext *apicommon.ValidationContext) bool {
	{
		validationContext.Enter("theCountLimitedRepeatedFloat32A")
		if len(m.TheCountLimitedRepeatedFloat32A) < 3 {
			validationContext.SetErrorDetails("length < 3")
			return false
		}
		if len(m.TheCountLimitedRepeatedFloat32A) > 5 {
			validationContext.SetErrorDetails("length > 5")
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theFloat32B")
		if !m.TheFloat32B.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.TheOptionalFloat32B != nil {
		validationContext.Enter("theOptionalFloat32B")
		if !m.TheOptionalFloat32B.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theRepeatedFloat32B")
		for i := range m.TheRepeatedFloat32B {
			v := &m.TheRepeatedFloat32B[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theCountLimitedRepeatedFloat32B")
		if len(m.TheCountLimitedRepeatedFloat32B) < 3 {
			validationContext.SetErrorDetails("length < 3")
			return false
		}
		if len(m.TheCountLimitedRepeatedFloat32B) > 5 {
			validationContext.SetErrorDetails("length > 5")
			return false
		}
		for i := range m.TheCountLimitedRepeatedFloat32B {
			v := &m.TheCountLimitedRepeatedFloat32B[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theXClosedFloat32A")
		if m.TheXClosedFloat32A < 1 {
			validationContext.SetErrorDetails("value < 1")
			return false
		}
		if m.TheXClosedFloat32A > 100 {
			validationContext.SetErrorDetails("value > 100")
			return false
		}
		validationContext.Leave()
	}
	if m.TheOptionalXClosedFloat32A != nil {
		v := *m.TheOptionalXClosedFloat32A
		validationContext.Enter("theOptionalXClosedFloat32A")
		if v < 1 {
			validationContext.SetErrorDetails("value < 1")
			return false
		}
		if v > 100 {
			validationContext.SetErrorDetails("value > 100")
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theRepeatedXClosedFloat32A")
		for i, v := range m.TheRepeatedXClosedFloat32A {
			validationContext.Enter(strconv.Itoa(i))
			if v < 1 {
				validationContext.SetErrorDetails("value < 1")
				return false
			}
			if v > 100 {
				validationContext.SetErrorDetails("value > 100")
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theCountLimitedRepeatedXClosedFloat32A")
		if len(m.TheCountLimitedRepeatedXClosedFloat32A) < 3 {
			validationContext.SetErrorDetails("length < 3")
			return false
		}
		if len(m.TheCountLimitedRepeatedXClosedFloat32A) > 5 {
			validationContext.SetErrorDetails("length > 5")
			return false
		}
		for i, v := range m.TheCountLimitedRepeatedXClosedFloat32A {
			validationContext.Enter(strconv.Itoa(i))
			if v < 1 {
				validationContext.SetErrorDetails("value < 1")
				return false
			}
			if v > 100 {
				validationContext.SetErrorDetails("value > 100")
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theXClosedFloat32B")
		if !m.TheXClosedFloat32B.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.TheOptionalXClosedFloat32B != nil {
		validationContext.Enter("theOptionalXClosedFloat32B")
		if !m.TheOptionalXClosedFloat32B.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theRepeatedXClosedFloat32B")
		for i := range m.TheRepeatedXClosedFloat32B {
			v := &m.TheRepeatedXClosedFloat32B[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theCountLimitedRepeatedXClosedFloat32B")
		if len(m.TheCountLimitedRepeatedXClosedFloat32B) < 3 {
			validationContext.SetErrorDetails("length < 3")
			return false
		}
		if len(m.TheCountLimitedRepeatedXClosedFloat32B) > 5 {
			validationContext.SetErrorDetails("length > 5")
			return false
		}
		for i := range m.TheCountLimitedRepeatedXClosedFloat32B {
			v := &m.TheCountLimitedRepeatedXClosedFloat32B[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theXOpenFloat32A")
		if m.TheXOpenFloat32A <= 1 {
			validationContext.SetErrorDetails("value <= 1")
			return false
		}
		if m.TheXOpenFloat32A >= 100 {
			validationContext.SetErrorDetails("value >= 100")
			return false
		}
		validationContext.Leave()
	}
	if m.TheOptionalXOpenFloat32A != nil {
		v := *m.TheOptionalXOpenFloat32A
		validationContext.Enter("theOptionalXOpenFloat32A")
		if v <= 1 {
			validationContext.SetErrorDetails("value <= 1")
			return false
		}
		if v >= 100 {
			validationContext.SetErrorDetails("value >= 100")
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theRepeatedXOpenFloat32A")
		for i, v := range m.TheRepeatedXOpenFloat32A {
			validationContext.Enter(strconv.Itoa(i))
			if v <= 1 {
				validationContext.SetErrorDetails("value <= 1")
				return false
			}
			if v >= 100 {
				validationContext.SetErrorDetails("value >= 100")
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theCountLimitedRepeatedXOpenFloat32A")
		if len(m.TheCountLimitedRepeatedXOpenFloat32A) < 3 {
			validationContext.SetErrorDetails("length < 3")
			return false
		}
		if len(m.TheCountLimitedRepeatedXOpenFloat32A) > 5 {
			validationContext.SetErrorDetails("length > 5")
			return false
		}
		for i, v := range m.TheCountLimitedRepeatedXOpenFloat32A {
			validationContext.Enter(strconv.Itoa(i))
			if v <= 1 {
				validationContext.SetErrorDetails("value <= 1")
				return false
			}
			if v >= 100 {
				validationContext.SetErrorDetails("value >= 100")
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theXOpenFloat32B")
		if !m.TheXOpenFloat32B.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.TheOptionalXOpenFloat32B != nil {
		validationContext.Enter("theOptionalXOpenFloat32B")
		if !m.TheOptionalXOpenFloat32B.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theRepeatedXOpenFloat32B")
		for i := range m.TheRepeatedXOpenFloat32B {
			v := &m.TheRepeatedXOpenFloat32B[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theCountLimitedRepeatedXOpenFloat32B")
		if len(m.TheCountLimitedRepeatedXOpenFloat32B) < 3 {
			validationContext.SetErrorDetails("length < 3")
			return false
		}
		if len(m.TheCountLimitedRepeatedXOpenFloat32B) > 5 {
			validationContext.SetErrorDetails("length > 5")
			return false
		}
		for i := range m.TheCountLimitedRepeatedXOpenFloat32B {
			v := &m.TheCountLimitedRepeatedXOpenFloat32B[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	if m.Other != nil {
		validationContext.Enter("other")
		if !m.Other.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("others")
		for i := range m.Others {
			v := &m.Others[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("countLimitedOthers")
		if len(m.CountLimitedOthers) > 3 {
			validationContext.SetErrorDetails("length > 3")
			return false
		}
		for i := range m.CountLimitedOthers {
			v := &m.CountLimitedOthers[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	mm := struct {
		apicommon.DummyFurtherValidator
		*MyStructFloat32
	}{MyStructFloat32: m}
	return mm.FurtherValidate(validationContext)
}

type MyStructFloat64 struct {
	TheFloat64A                            float64           `json:"theFloat64A"`
	TheOptionalFloat64A                    *float64          `json:"theOptionalFloat64A,omitempty"`
	TheRepeatedFloat64A                    []float64         `json:"theRepeatedFloat64A,omitempty"`
	TheCountLimitedRepeatedFloat64A        []float64         `json:"theCountLimitedRepeatedFloat64A"`
	TheFloat64B                            Float64           `json:"theFloat64B"`
	TheOptionalFloat64B                    *Float64          `json:"theOptionalFloat64B,omitempty"`
	TheRepeatedFloat64B                    []Float64         `json:"theRepeatedFloat64B,omitempty"`
	TheCountLimitedRepeatedFloat64B        []Float64         `json:"theCountLimitedRepeatedFloat64B"`
	TheXClosedFloat64A                     float64           `json:"theXClosedFloat64A"`
	TheOptionalXClosedFloat64A             *float64          `json:"theOptionalXClosedFloat64A,omitempty"`
	TheRepeatedXClosedFloat64A             []float64         `json:"theRepeatedXClosedFloat64A,omitempty"`
	TheCountLimitedRepeatedXClosedFloat64A []float64         `json:"theCountLimitedRepeatedXClosedFloat64A"`
	TheXClosedFloat64B                     XClosedFloat64    `json:"theXClosedFloat64B"`
	TheOptionalXClosedFloat64B             *XClosedFloat64   `json:"theOptionalXClosedFloat64B,omitempty"`
	TheRepeatedXClosedFloat64B             []XClosedFloat64  `json:"theRepeatedXClosedFloat64B,omitempty"`
	TheCountLimitedRepeatedXClosedFloat64B []XClosedFloat64  `json:"theCountLimitedRepeatedXClosedFloat64B"`
	TheXOpenFloat64A                       float64           `json:"theXOpenFloat64A"`
	TheOptionalXOpenFloat64A               *float64          `json:"theOptionalXOpenFloat64A,omitempty"`
	TheRepeatedXOpenFloat64A               []float64         `json:"theRepeatedXOpenFloat64A,omitempty"`
	TheCountLimitedRepeatedXOpenFloat64A   []float64         `json:"theCountLimitedRepeatedXOpenFloat64A"`
	TheXOpenFloat64B                       XOpenFloat64      `json:"theXOpenFloat64B"`
	TheOptionalXOpenFloat64B               *XOpenFloat64     `json:"theOptionalXOpenFloat64B,omitempty"`
	TheRepeatedXOpenFloat64B               []XOpenFloat64    `json:"theRepeatedXOpenFloat64B,omitempty"`
	TheCountLimitedRepeatedXOpenFloat64B   []XOpenFloat64    `json:"theCountLimitedRepeatedXOpenFloat64B"`
	Other                                  *MyStructFloat64  `json:"other,omitempty"`
	Others                                 []MyStructFloat64 `json:"others,omitempty"`
	CountLimitedOthers                     []MyStructFloat64 `json:"countLimitedOthers,omitempty"`
}

var _ apicommon.Model = (*MyStructFloat64)(nil)

func (m *MyStructFloat64) Validate(validationContext *apicommon.ValidationContext) bool {
	{
		validationContext.Enter("theCountLimitedRepeatedFloat64A")
		if len(m.TheCountLimitedRepeatedFloat64A) < 3 {
			validationContext.SetErrorDetails("length < 3")
			return false
		}
		if len(m.TheCountLimitedRepeatedFloat64A) > 5 {
			validationContext.SetErrorDetails("length > 5")
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theFloat64B")
		if !m.TheFloat64B.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.TheOptionalFloat64B != nil {
		validationContext.Enter("theOptionalFloat64B")
		if !m.TheOptionalFloat64B.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theRepeatedFloat64B")
		for i := range m.TheRepeatedFloat64B {
			v := &m.TheRepeatedFloat64B[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theCountLimitedRepeatedFloat64B")
		if len(m.TheCountLimitedRepeatedFloat64B) < 3 {
			validationContext.SetErrorDetails("length < 3")
			return false
		}
		if len(m.TheCountLimitedRepeatedFloat64B) > 5 {
			validationContext.SetErrorDetails("length > 5")
			return false
		}
		for i := range m.TheCountLimitedRepeatedFloat64B {
			v := &m.TheCountLimitedRepeatedFloat64B[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theXClosedFloat64A")
		if m.TheXClosedFloat64A < -100 {
			validationContext.SetErrorDetails("value < -100")
			return false
		}
		if m.TheXClosedFloat64A > -1 {
			validationContext.SetErrorDetails("value > -1")
			return false
		}
		validationContext.Leave()
	}
	if m.TheOptionalXClosedFloat64A != nil {
		v := *m.TheOptionalXClosedFloat64A
		validationContext.Enter("theOptionalXClosedFloat64A")
		if v < -100 {
			validationContext.SetErrorDetails("value < -100")
			return false
		}
		if v > -1 {
			validationContext.SetErrorDetails("value > -1")
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theRepeatedXClosedFloat64A")
		for i, v := range m.TheRepeatedXClosedFloat64A {
			validationContext.Enter(strconv.Itoa(i))
			if v < -100 {
				validationContext.SetErrorDetails("value < -100")
				return false
			}
			if v > -1 {
				validationContext.SetErrorDetails("value > -1")
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theCountLimitedRepeatedXClosedFloat64A")
		if len(m.TheCountLimitedRepeatedXClosedFloat64A) < 3 {
			validationContext.SetErrorDetails("length < 3")
			return false
		}
		if len(m.TheCountLimitedRepeatedXClosedFloat64A) > 5 {
			validationContext.SetErrorDetails("length > 5")
			return false
		}
		for i, v := range m.TheCountLimitedRepeatedXClosedFloat64A {
			validationContext.Enter(strconv.Itoa(i))
			if v < -100 {
				validationContext.SetErrorDetails("value < -100")
				return false
			}
			if v > -1 {
				validationContext.SetErrorDetails("value > -1")
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theXClosedFloat64B")
		if !m.TheXClosedFloat64B.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.TheOptionalXClosedFloat64B != nil {
		validationContext.Enter("theOptionalXClosedFloat64B")
		if !m.TheOptionalXClosedFloat64B.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theRepeatedXClosedFloat64B")
		for i := range m.TheRepeatedXClosedFloat64B {
			v := &m.TheRepeatedXClosedFloat64B[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theCountLimitedRepeatedXClosedFloat64B")
		if len(m.TheCountLimitedRepeatedXClosedFloat64B) < 3 {
			validationContext.SetErrorDetails("length < 3")
			return false
		}
		if len(m.TheCountLimitedRepeatedXClosedFloat64B) > 5 {
			validationContext.SetErrorDetails("length > 5")
			return false
		}
		for i := range m.TheCountLimitedRepeatedXClosedFloat64B {
			v := &m.TheCountLimitedRepeatedXClosedFloat64B[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theXOpenFloat64A")
		if m.TheXOpenFloat64A <= -100 {
			validationContext.SetErrorDetails("value <= -100")
			return false
		}
		if m.TheXOpenFloat64A >= -1 {
			validationContext.SetErrorDetails("value >= -1")
			return false
		}
		validationContext.Leave()
	}
	if m.TheOptionalXOpenFloat64A != nil {
		v := *m.TheOptionalXOpenFloat64A
		validationContext.Enter("theOptionalXOpenFloat64A")
		if v <= -100 {
			validationContext.SetErrorDetails("value <= -100")
			return false
		}
		if v >= -1 {
			validationContext.SetErrorDetails("value >= -1")
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theRepeatedXOpenFloat64A")
		for i, v := range m.TheRepeatedXOpenFloat64A {
			validationContext.Enter(strconv.Itoa(i))
			if v <= -100 {
				validationContext.SetErrorDetails("value <= -100")
				return false
			}
			if v >= -1 {
				validationContext.SetErrorDetails("value >= -1")
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theCountLimitedRepeatedXOpenFloat64A")
		if len(m.TheCountLimitedRepeatedXOpenFloat64A) < 3 {
			validationContext.SetErrorDetails("length < 3")
			return false
		}
		if len(m.TheCountLimitedRepeatedXOpenFloat64A) > 5 {
			validationContext.SetErrorDetails("length > 5")
			return false
		}
		for i, v := range m.TheCountLimitedRepeatedXOpenFloat64A {
			validationContext.Enter(strconv.Itoa(i))
			if v <= -100 {
				validationContext.SetErrorDetails("value <= -100")
				return false
			}
			if v >= -1 {
				validationContext.SetErrorDetails("value >= -1")
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theXOpenFloat64B")
		if !m.TheXOpenFloat64B.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.TheOptionalXOpenFloat64B != nil {
		validationContext.Enter("theOptionalXOpenFloat64B")
		if !m.TheOptionalXOpenFloat64B.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theRepeatedXOpenFloat64B")
		for i := range m.TheRepeatedXOpenFloat64B {
			v := &m.TheRepeatedXOpenFloat64B[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theCountLimitedRepeatedXOpenFloat64B")
		if len(m.TheCountLimitedRepeatedXOpenFloat64B) < 3 {
			validationContext.SetErrorDetails("length < 3")
			return false
		}
		if len(m.TheCountLimitedRepeatedXOpenFloat64B) > 5 {
			validationContext.SetErrorDetails("length > 5")
			return false
		}
		for i := range m.TheCountLimitedRepeatedXOpenFloat64B {
			v := &m.TheCountLimitedRepeatedXOpenFloat64B[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	if m.Other != nil {
		validationContext.Enter("other")
		if !m.Other.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("others")
		for i := range m.Others {
			v := &m.Others[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("countLimitedOthers")
		if len(m.CountLimitedOthers) > 3 {
			validationContext.SetErrorDetails("length > 3")
			return false
		}
		for i := range m.CountLimitedOthers {
			v := &m.CountLimitedOthers[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	mm := struct {
		apicommon.DummyFurtherValidator
		*MyStructFloat64
	}{MyStructFloat64: m}
	return mm.FurtherValidate(validationContext)
}

type MyStructInt64 struct {
	TheInt64A                        int64           `json:"theInt64A"`
	TheOptionalInt64A                *int64          `json:"theOptionalInt64A,omitempty"`
	TheRepeatedInt64A                []int64         `json:"theRepeatedInt64A,omitempty"`
	TheCountLimitedRepeatedInt64A    []int64         `json:"theCountLimitedRepeatedInt64A"`
	TheInt64B                        Int64           `json:"theInt64B"`
	TheOptionalInt64B                *Int64          `json:"theOptionalInt64B,omitempty"`
	TheRepeatedInt64B                []Int64         `json:"theRepeatedInt64B,omitempty"`
	TheCountLimitedRepeatedInt64B    []Int64         `json:"theCountLimitedRepeatedInt64B"`
	TheXInt64A                       int64           `json:"theXInt64A"`
	TheOptionalXInt64A               *int64          `json:"theOptionalXInt64A,omitempty"`
	TheRepeatedXInt64A               []int64         `json:"theRepeatedXInt64A,omitempty"`
	TheCountLimitedRepeatedXInt64A   []int64         `json:"theCountLimitedRepeatedXInt64A"`
	TheXInt64B                       XInt64          `json:"theXInt64B"`
	TheOptionalXInt64B               *XInt64         `json:"theOptionalXInt64B,omitempty"`
	TheRepeatedXInt64B               []XInt64        `json:"theRepeatedXInt64B,omitempty"`
	TheCountLimitedRepeatedXInt64B   []XInt64        `json:"theCountLimitedRepeatedXInt64B"`
	TheEnumInt64                     EnumInt64       `json:"theEnumInt64"`
	TheOptionalEnumInt64             *EnumInt64      `json:"theOptionalEnumInt64,omitempty"`
	TheRepeatedEnumInt64             []EnumInt64     `json:"theRepeatedEnumInt64,omitempty"`
	TheCountLimitedRepeatedEnumInt64 []EnumInt64     `json:"theCountLimitedRepeatedEnumInt64"`
	Other                            *MyStructInt64  `json:"other,omitempty"`
	Others                           []MyStructInt64 `json:"others,omitempty"`
	CountLimitedOthers               []MyStructInt64 `json:"countLimitedOthers,omitempty"`
}

var _ apicommon.Model = (*MyStructInt64)(nil)

func (m *MyStructInt64) Validate(validationContext *apicommon.ValidationContext) bool {
	{
		validationContext.Enter("theCountLimitedRepeatedInt64A")
		if len(m.TheCountLimitedRepeatedInt64A) < 3 {
			validationContext.SetErrorDetails("length < 3")
			return false
		}
		if len(m.TheCountLimitedRepeatedInt64A) > 5 {
			validationContext.SetErrorDetails("length > 5")
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theInt64B")
		if !m.TheInt64B.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.TheOptionalInt64B != nil {
		validationContext.Enter("theOptionalInt64B")
		if !m.TheOptionalInt64B.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theRepeatedInt64B")
		for i := range m.TheRepeatedInt64B {
			v := &m.TheRepeatedInt64B[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theCountLimitedRepeatedInt64B")
		if len(m.TheCountLimitedRepeatedInt64B) < 3 {
			validationContext.SetErrorDetails("length < 3")
			return false
		}
		if len(m.TheCountLimitedRepeatedInt64B) > 5 {
			validationContext.SetErrorDetails("length > 5")
			return false
		}
		for i := range m.TheCountLimitedRepeatedInt64B {
			v := &m.TheCountLimitedRepeatedInt64B[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theXInt64A")
		if m.TheXInt64A < -999 {
			validationContext.SetErrorDetails("value < -999")
			return false
		}
		if m.TheXInt64A > -100 {
			validationContext.SetErrorDetails("value > -100")
			return false
		}
		validationContext.Leave()
	}
	if m.TheOptionalXInt64A != nil {
		v := *m.TheOptionalXInt64A
		validationContext.Enter("theOptionalXInt64A")
		if v < -999 {
			validationContext.SetErrorDetails("value < -999")
			return false
		}
		if v > -100 {
			validationContext.SetErrorDetails("value > -100")
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theRepeatedXInt64A")
		for i, v := range m.TheRepeatedXInt64A {
			validationContext.Enter(strconv.Itoa(i))
			if v < -999 {
				validationContext.SetErrorDetails("value < -999")
				return false
			}
			if v > -100 {
				validationContext.SetErrorDetails("value > -100")
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theCountLimitedRepeatedXInt64A")
		if len(m.TheCountLimitedRepeatedXInt64A) < 3 {
			validationContext.SetErrorDetails("length < 3")
			return false
		}
		if len(m.TheCountLimitedRepeatedXInt64A) > 5 {
			validationContext.SetErrorDetails("length > 5")
			return false
		}
		for i, v := range m.TheCountLimitedRepeatedXInt64A {
			validationContext.Enter(strconv.Itoa(i))
			if v < -999 {
				validationContext.SetErrorDetails("value < -999")
				return false
			}
			if v > -100 {
				validationContext.SetErrorDetails("value > -100")
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theXInt64B")
		if !m.TheXInt64B.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.TheOptionalXInt64B != nil {
		validationContext.Enter("theOptionalXInt64B")
		if !m.TheOptionalXInt64B.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theRepeatedXInt64B")
		for i := range m.TheRepeatedXInt64B {
			v := &m.TheRepeatedXInt64B[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theCountLimitedRepeatedXInt64B")
		if len(m.TheCountLimitedRepeatedXInt64B) < 3 {
			validationContext.SetErrorDetails("length < 3")
			return false
		}
		if len(m.TheCountLimitedRepeatedXInt64B) > 5 {
			validationContext.SetErrorDetails("length > 5")
			return false
		}
		for i := range m.TheCountLimitedRepeatedXInt64B {
			v := &m.TheCountLimitedRepeatedXInt64B[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theEnumInt64")
		if !m.TheEnumInt64.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.TheOptionalEnumInt64 != nil {
		validationContext.Enter("theOptionalEnumInt64")
		if !m.TheOptionalEnumInt64.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theRepeatedEnumInt64")
		for i := range m.TheRepeatedEnumInt64 {
			v := &m.TheRepeatedEnumInt64[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theCountLimitedRepeatedEnumInt64")
		if len(m.TheCountLimitedRepeatedEnumInt64) < 3 {
			validationContext.SetErrorDetails("length < 3")
			return false
		}
		if len(m.TheCountLimitedRepeatedEnumInt64) > 5 {
			validationContext.SetErrorDetails("length > 5")
			return false
		}
		for i := range m.TheCountLimitedRepeatedEnumInt64 {
			v := &m.TheCountLimitedRepeatedEnumInt64[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	if m.Other != nil {
		validationContext.Enter("other")
		if !m.Other.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("others")
		for i := range m.Others {
			v := &m.Others[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("countLimitedOthers")
		if len(m.CountLimitedOthers) > 3 {
			validationContext.SetErrorDetails("length > 3")
			return false
		}
		for i := range m.CountLimitedOthers {
			v := &m.CountLimitedOthers[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	mm := struct {
		apicommon.DummyFurtherValidator
		*MyStructInt64
	}{MyStructInt64: m}
	return mm.FurtherValidate(validationContext)
}

type MyStructString struct {
	TheStringA                        string           `json:"theStringA"`
	TheOptionalStringA                *string          `json:"theOptionalStringA,omitempty"`
	TheRepeatedStringA                []string         `json:"theRepeatedStringA,omitempty"`
	TheCountLimitedRepeatedStringA    []string         `json:"theCountLimitedRepeatedStringA"`
	TheStringB                        String           `json:"theStringB"`
	TheOptionalStringB                *String          `json:"theOptionalStringB,omitempty"`
	TheRepeatedStringB                []String         `json:"theRepeatedStringB,omitempty"`
	TheCountLimitedRepeatedStringB    []String         `json:"theCountLimitedRepeatedStringB"`
	TheXStringA                       string           `json:"theXStringA"`
	TheOptionalXStringA               *string          `json:"theOptionalXStringA,omitempty"`
	TheRepeatedXStringA               []string         `json:"theRepeatedXStringA,omitempty"`
	TheCountLimitedRepeatedXStringA   []string         `json:"theCountLimitedRepeatedXStringA"`
	TheXStringB                       XString          `json:"theXStringB"`
	TheOptionalXStringB               *XString         `json:"theOptionalXStringB,omitempty"`
	TheRepeatedXStringB               []XString        `json:"theRepeatedXStringB,omitempty"`
	TheCountLimitedRepeatedXStringB   []XString        `json:"theCountLimitedRepeatedXStringB"`
	TheEnumString                     EnumString       `json:"theEnumString"`
	TheOptionalEnumString             *EnumString      `json:"theOptionalEnumString,omitempty"`
	TheRepeatedEnumString             []EnumString     `json:"theRepeatedEnumString,omitempty"`
	TheCountLimitedRepeatedEnumString []EnumString     `json:"theCountLimitedRepeatedEnumString"`
	Other                             *MyStructString  `json:"other,omitempty"`
	Others                            []MyStructString `json:"others,omitempty"`
	CountLimitedOthers                []MyStructString `json:"countLimitedOthers,omitempty"`
}

var _ apicommon.Model = (*MyStructString)(nil)

func (m *MyStructString) Validate(validationContext *apicommon.ValidationContext) bool {
	{
		validationContext.Enter("theCountLimitedRepeatedStringA")
		if len(m.TheCountLimitedRepeatedStringA) < 3 {
			validationContext.SetErrorDetails("length < 3")
			return false
		}
		if len(m.TheCountLimitedRepeatedStringA) > 5 {
			validationContext.SetErrorDetails("length > 5")
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theStringB")
		if !m.TheStringB.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.TheOptionalStringB != nil {
		validationContext.Enter("theOptionalStringB")
		if !m.TheOptionalStringB.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theRepeatedStringB")
		for i := range m.TheRepeatedStringB {
			v := &m.TheRepeatedStringB[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theCountLimitedRepeatedStringB")
		if len(m.TheCountLimitedRepeatedStringB) < 3 {
			validationContext.SetErrorDetails("length < 3")
			return false
		}
		if len(m.TheCountLimitedRepeatedStringB) > 5 {
			validationContext.SetErrorDetails("length > 5")
			return false
		}
		for i := range m.TheCountLimitedRepeatedStringB {
			v := &m.TheCountLimitedRepeatedStringB[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theXStringA")
		if len(m.TheXStringA) < 3 {
			validationContext.SetErrorDetails("length < 3")
			return false
		}
		if len(m.TheXStringA) > 9 {
			validationContext.SetErrorDetails("length > 9")
			return false
		}
		if !patterns[0].MatchString(m.TheXStringA) {
			validationContext.SetErrorDetails("value not matched to \"[a-zA-Z0-9]*\"")
			return false
		}
		validationContext.Leave()
	}
	if m.TheOptionalXStringA != nil {
		v := *m.TheOptionalXStringA
		validationContext.Enter("theOptionalXStringA")
		if len(v) < 3 {
			validationContext.SetErrorDetails("length < 3")
			return false
		}
		if len(v) > 9 {
			validationContext.SetErrorDetails("length > 9")
			return false
		}
		if !patterns[0].MatchString(v) {
			validationContext.SetErrorDetails("value not matched to \"[a-zA-Z0-9]*\"")
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theRepeatedXStringA")
		for i, v := range m.TheRepeatedXStringA {
			validationContext.Enter(strconv.Itoa(i))
			if len(v) < 3 {
				validationContext.SetErrorDetails("length < 3")
				return false
			}
			if len(v) > 9 {
				validationContext.SetErrorDetails("length > 9")
				return false
			}
			if !patterns[0].MatchString(v) {
				validationContext.SetErrorDetails("value not matched to \"[a-zA-Z0-9]*\"")
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theCountLimitedRepeatedXStringA")
		if len(m.TheCountLimitedRepeatedXStringA) < 3 {
			validationContext.SetErrorDetails("length < 3")
			return false
		}
		if len(m.TheCountLimitedRepeatedXStringA) > 5 {
			validationContext.SetErrorDetails("length > 5")
			return false
		}
		for i, v := range m.TheCountLimitedRepeatedXStringA {
			validationContext.Enter(strconv.Itoa(i))
			if len(v) < 3 {
				validationContext.SetErrorDetails("length < 3")
				return false
			}
			if len(v) > 9 {
				validationContext.SetErrorDetails("length > 9")
				return false
			}
			if !patterns[0].MatchString(v) {
				validationContext.SetErrorDetails("value not matched to \"[a-zA-Z0-9]*\"")
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theXStringB")
		if !m.TheXStringB.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.TheOptionalXStringB != nil {
		validationContext.Enter("theOptionalXStringB")
		if !m.TheOptionalXStringB.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theRepeatedXStringB")
		for i := range m.TheRepeatedXStringB {
			v := &m.TheRepeatedXStringB[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theCountLimitedRepeatedXStringB")
		if len(m.TheCountLimitedRepeatedXStringB) < 3 {
			validationContext.SetErrorDetails("length < 3")
			return false
		}
		if len(m.TheCountLimitedRepeatedXStringB) > 5 {
			validationContext.SetErrorDetails("length > 5")
			return false
		}
		for i := range m.TheCountLimitedRepeatedXStringB {
			v := &m.TheCountLimitedRepeatedXStringB[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theEnumString")
		if !m.TheEnumString.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	if m.TheOptionalEnumString != nil {
		validationContext.Enter("theOptionalEnumString")
		if !m.TheOptionalEnumString.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theRepeatedEnumString")
		for i := range m.TheRepeatedEnumString {
			v := &m.TheRepeatedEnumString[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("theCountLimitedRepeatedEnumString")
		if len(m.TheCountLimitedRepeatedEnumString) < 3 {
			validationContext.SetErrorDetails("length < 3")
			return false
		}
		if len(m.TheCountLimitedRepeatedEnumString) > 5 {
			validationContext.SetErrorDetails("length > 5")
			return false
		}
		for i := range m.TheCountLimitedRepeatedEnumString {
			v := &m.TheCountLimitedRepeatedEnumString[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	if m.Other != nil {
		validationContext.Enter("other")
		if !m.Other.Validate(validationContext) {
			return false
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("others")
		for i := range m.Others {
			v := &m.Others[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	{
		validationContext.Enter("countLimitedOthers")
		if len(m.CountLimitedOthers) > 3 {
			validationContext.SetErrorDetails("length > 3")
			return false
		}
		for i := range m.CountLimitedOthers {
			v := &m.CountLimitedOthers[i]
			validationContext.Enter(strconv.Itoa(i))
			if !v.Validate(validationContext) {
				return false
			}
			validationContext.Leave()
		}
		validationContext.Leave()
	}
	mm := struct {
		apicommon.DummyFurtherValidator
		*MyStructString
	}{MyStructString: m}
	return mm.FurtherValidate(validationContext)
}

type EnumInt32 int32

const (
	C321 EnumInt32 = 100
	C322 EnumInt32 = 200
)

var _ fmt.Stringer = EnumInt32(0)

func (m EnumInt32) String() string {
	switch m {
	case C321:
		return "C321"
	case C322:
		return "C322"
	default:
		return "EnumInt32(" + strconv.FormatInt(int64(m), 10) + ")"
	}
}

var _ apicommon.Model = EnumInt32(0)

func (m EnumInt32) Validate(validationContext *apicommon.ValidationContext) bool {
	switch m {
	case C321:
		return true
	case C322:
		return true
	default:
		validationContext.SetErrorDetails("value not in (100, 200)")
		return false
	}
}

type EnumInt64 int64

const (
	C641 EnumInt64 = 200
	C642 EnumInt64 = 400
)

var _ fmt.Stringer = EnumInt64(0)

func (m EnumInt64) String() string {
	switch m {
	case C641:
		return "C641"
	case C642:
		return "C642"
	default:
		return "EnumInt64(" + strconv.FormatInt(int64(m), 10) + ")"
	}
}

var _ apicommon.Model = EnumInt64(0)

func (m EnumInt64) Validate(validationContext *apicommon.ValidationContext) bool {
	switch m {
	case C641:
		return true
	case C642:
		return true
	default:
		validationContext.SetErrorDetails("value not in (200, 400)")
		return false
	}
}

type EnumString string

const (
	S1 EnumString = "abc"
	S2 EnumString = "def"
)

var _ fmt.Stringer = EnumString("")

func (m EnumString) String() string {
	switch m {
	case S1:
		return "S1"
	case S2:
		return "S2"
	default:
		return "EnumString(" + strconv.Quote(string(m)) + ")"
	}
}

var _ apicommon.Model = EnumString("")

func (m EnumString) Validate(validationContext *apicommon.ValidationContext) bool {
	switch m {
	case S1:
		return true
	case S2:
		return true
	default:
		validationContext.SetErrorDetails("value not in (\"abc\", \"def\")")
		return false
	}
}

type Int32 int32

var _ apicommon.Model = Int32(0)

func (m Int32) Validate(validationContext *apicommon.ValidationContext) bool {
	mm := struct {
		apicommon.DummyFurtherValidator
		Int32
	}{Int32: m}
	return mm.FurtherValidate(validationContext)
}

type XInt32 int32

var _ apicommon.Model = XInt32(0)

func (m XInt32) Validate(validationContext *apicommon.ValidationContext) bool {
	if m < 100 {
		validationContext.SetErrorDetails("value < 100")
		return false
	}
	if m > 999 {
		validationContext.SetErrorDetails("value > 999")
		return false
	}
	mm := struct {
		apicommon.DummyFurtherValidator
		XInt32
	}{XInt32: m}
	return mm.FurtherValidate(validationContext)
}

type Int64 int64

var _ apicommon.Model = Int64(0)

func (m Int64) Validate(validationContext *apicommon.ValidationContext) bool {
	mm := struct {
		apicommon.DummyFurtherValidator
		Int64
	}{Int64: m}
	return mm.FurtherValidate(validationContext)
}

type XInt64 int64

var _ apicommon.Model = XInt64(0)

func (m XInt64) Validate(validationContext *apicommon.ValidationContext) bool {
	if m < -999 {
		validationContext.SetErrorDetails("value < -999")
		return false
	}
	if m > -100 {
		validationContext.SetErrorDetails("value > -100")
		return false
	}
	mm := struct {
		apicommon.DummyFurtherValidator
		XInt64
	}{XInt64: m}
	return mm.FurtherValidate(validationContext)
}

type Float32 float32

var _ apicommon.Model = Float32(0)

func (m Float32) Validate(validationContext *apicommon.ValidationContext) bool {
	mm := struct {
		apicommon.DummyFurtherValidator
		Float32
	}{Float32: m}
	return mm.FurtherValidate(validationContext)
}

type XClosedFloat32 float32

var _ apicommon.Model = XClosedFloat32(0)

func (m XClosedFloat32) Validate(validationContext *apicommon.ValidationContext) bool {
	if m < 1 {
		validationContext.SetErrorDetails("value < 1")
		return false
	}
	if m > 100 {
		validationContext.SetErrorDetails("value > 100")
		return false
	}
	mm := struct {
		apicommon.DummyFurtherValidator
		XClosedFloat32
	}{XClosedFloat32: m}
	return mm.FurtherValidate(validationContext)
}

type XOpenFloat32 float32

var _ apicommon.Model = XOpenFloat32(0)

func (m XOpenFloat32) Validate(validationContext *apicommon.ValidationContext) bool {
	if m <= 1 {
		validationContext.SetErrorDetails("value <= 1")
		return false
	}
	if m >= 100 {
		validationContext.SetErrorDetails("value >= 100")
		return false
	}
	mm := struct {
		apicommon.DummyFurtherValidator
		XOpenFloat32
	}{XOpenFloat32: m}
	return mm.FurtherValidate(validationContext)
}

type Float64 float64

var _ apicommon.Model = Float64(0)

func (m Float64) Validate(validationContext *apicommon.ValidationContext) bool {
	mm := struct {
		apicommon.DummyFurtherValidator
		Float64
	}{Float64: m}
	return mm.FurtherValidate(validationContext)
}

type XOpenFloat64 float64

var _ apicommon.Model = XOpenFloat64(0)

func (m XOpenFloat64) Validate(validationContext *apicommon.ValidationContext) bool {
	if m <= -100 {
		validationContext.SetErrorDetails("value <= -100")
		return false
	}
	if m >= -1 {
		validationContext.SetErrorDetails("value >= -1")
		return false
	}
	mm := struct {
		apicommon.DummyFurtherValidator
		XOpenFloat64
	}{XOpenFloat64: m}
	return mm.FurtherValidate(validationContext)
}

type XClosedFloat64 float64

var _ apicommon.Model = XClosedFloat64(0)

func (m XClosedFloat64) Validate(validationContext *apicommon.ValidationContext) bool {
	if m < -100 {
		validationContext.SetErrorDetails("value < -100")
		return false
	}
	if m > -1 {
		validationContext.SetErrorDetails("value > -1")
		return false
	}
	mm := struct {
		apicommon.DummyFurtherValidator
		XClosedFloat64
	}{XClosedFloat64: m}
	return mm.FurtherValidate(validationContext)
}

type String string

var _ apicommon.Model = String("")

func (m String) Validate(validationContext *apicommon.ValidationContext) bool {
	mm := struct {
		apicommon.DummyFurtherValidator
		String
	}{String: m}
	return mm.FurtherValidate(validationContext)
}

type XString string

var _ apicommon.Model = XString("")

func (m XString) Validate(validationContext *apicommon.ValidationContext) bool {
	if len(m) < 3 {
		validationContext.SetErrorDetails("length < 3")
		return false
	}
	if len(m) > 9 {
		validationContext.SetErrorDetails("length > 9")
		return false
	}
	if !patterns[0].MatchString(string(m)) {
		validationContext.SetErrorDetails("value not matched to \"[a-zA-Z0-9]*\"")
		return false
	}
	mm := struct {
		apicommon.DummyFurtherValidator
		XString
	}{XString: m}
	return mm.FurtherValidate(validationContext)
}

var patterns = [...]*regexp.Regexp{
	0: regexp.MustCompile("^[a-zA-Z0-9]*$"),
}
